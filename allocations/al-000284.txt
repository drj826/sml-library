>>>allocation.al-000284

configuration_item:: ci-000006 # SML Semantics

requirement::  rq-000194 # Represent Inference Rules

test::     tc-000041 # Demonstration

revision:: $Revision: 15124 $

date::     $Date: 2013-07-07 09:23:01 -0600 (Sun, 07 Jul 2013) $

author::   $Author: don.johnson $

outcome::2012-03-25:al-000284:red: At this time SML does not represent
inference rules.

######################################################################

For instance, demonstrate a rule, using SML syntax, that throws a
warning if a functional requirement is ~~not~~ derived from a business
requirement.  Remember, it must be human readable. Writing this rule
will require proving the non-existence of a condition.

Let's start with an easier rule.  Throw an INFO message if a
functional requirement is directly derived from a business
requirement.  Reserved words are in all UPPERCASE.

>>>COMMENT

  >>>rule

  title:: Throw an INFO Message if a Functional Requirement is
  Directly Derived From a Business Requirement

  label:: rl-000001

  var:: V1 = [lookup:type:[var:id]]
  var:: V2 = [lookup:derived_from:[var:id]]
  var:: V3 = [lookup:type:[var:V2]]

  condition::C1: [var:id] ENTITY-CLASS-IS 'problem'
  condition::C2: [var:id] HAS-PROPERTY    'type'
  condition::C3: [var:V1] EQ              'function'
  condition::C4: [var:id] HAS-PROPERTY    'derived_from'
  condition::C5: [var:V2] ENTITY-CLASS-IS 'problem'
  condition::C6: [var:V2] HAS-PROPERTY    'type'
  condition::C7: [var:V3] EQ              'business'

  if:: (     [condition:C1]
         AND [condition:C2]
         AND [condition:C3]
         AND [condition:C4]
         AND [condition:C5]
         AND [condition:C6]
         AND [condition:C7] )

  then:: INFO [var:id] is derived from business requirement [var:V2]

  <<<rule

<<<COMMENT

This is a start.

index:: [id:al-000284]

<<<allocation
