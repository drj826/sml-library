>>>FRAGMENT.glossary-sml

>>>COMMENT

Semantic Manuscript Language (SML) Vocabulary

Dependency: This vocabulary depends on the IEEE vocabulary.  If you
include this vocabulary in your document you must also include
`glossary-ieee.txt'.

<<<COMMENT

######################################################################
# A
######################################################################

glossary:: ATTACHMENT {SML} = A [g:SML2:structure] that attaches an
external file at a specific place within an [a:SML] [g:SML:DOCUMENT]

glossary:: AUDIO {SML} = A [g:SML2:structure] that inserts an audio
clip into an [a:SML] [g:SML:DOCUMENT]

###

glossary:: acceptance test {SML} = Formal testing conducted to
determine whether or not a system, subsystem, or configuration item
satisfies its acceptance criteria and to enable the customer to
determine whether or not to accept

glossary:: acronym {SML} = A type of abbreviation in which a term is
based on the initial letters of the various elements of a full word
phrase

glossary:: allocation {SML} = (NOUN) An [g:SML2:entity] that (1)
establishes a relationship between a function and a system component
that must perform that function, and (2) identifies the test that
verifies the system component performs the function as required.
(VERB) The design activity of relating functions to the system
components that will perform them and the tests that will verify the
system components perform the functions as required

glossary:: anti-pattern {SML} = (1) a [g:SML:pattern] that may be
commonly used but is ineffective and/or counterproductive in practice;
(2) obvious, but wrong, solutions to recurring problems; (3) common
approaches to solving recurring problems that prove to be ineffective

glossary:: application programming interface {SML} = ([acs:SML:API]) a
set of routines, protocols, and tools for building software and
applications. An API expresses a software component in terms of its
operations, inputs, outputs, and underlying types, defining
functionalities that are independent of their respective
implementations, which allows definitions and implementations to vary
without compromising the interface. A good API makes it easier to
develop a program by providing all the building blocks, which are then
put together by the programmer. [cite:wp-api]

glossary:: assignment {SML} = (NOUN) An [g:SML2:entity] that (1)
establishes a relationship between an activity and a role that must
perform that activity, and (2) identifies the audit that verifies the
role performs the activity as required.  (VERB) The planning activity
of relating activities to the roles that will perform them and the
audits that will verify the roles perform the activities as required

glossary:: attribute definition {SML} = A [g:SML:definition] that
defines a key/value pair where the key is the attribute name and the
value is the definition.  Attribute definitions are limited to a
single block of text

glossary:: AUDIO {SML} = A [g:SML2:structure] that instructs the
publishing application to insert an audio clip into the document

######################################################################
# B
######################################################################

glossary:: BARE_TABLE {SML} = A [g:SML2:structure] that renders a
table ~~without~~ a title (caption), description, or number and does
~~not~~ put the table in the list of tables.  See also [g:SML:TABLE]

glossary:: BULLET_LIST {SML} = (||SML::BulletList||) A
[g:SML2:structure] that creates a list of bullet items. Each bullet
item may ~~only~~ consist of a single [g:SML:paragraph]. Bullet lists
may be nested to any depth and may be used as sub-lists within
[g:SML:ENUMERATED_LIST]s.  See also [g:SML:ENUMERATED_LIST] and
[g:SML:DEFINITION_LIST]

glossary:: Backus-Naur Form = ([acs:BNF]) a notation technique for
context-free grammars, often used to describe the syntax of languages
used in computing, such as computer programming languages, document
formats, instruction sets and communication protocols. It is applied
wherever exact descriptions of languages are needed, for instance, in
official language specifications, in manuals, and in textbooks on
programming language theory

###

glossary:: block {SML} = A [g:SML:part] which is a contiguous sequence
of one or more ~~whole~~ non-blank [g:SML:line]s of text.  Blocks end
with either a blank line or the beginning of another block. Blocks may
contain [g:SML:string]s

glossary:: break-fix {SML} = To replace/fix a broken part or to revert
the system back to its approved baseline configuration.  Examples
include replace a hard drive, clean a corrupted work file, and restore
a corrupted definition file.  Performing a break-fix action may or may
not be an emergency.  Any change to a baseline CI that does ~~not~~
reset the CI to its approved baseline configuration constitutes a
change and is ~~not~~ a break-fix

glossary:: business requirement {SML} = A requirement that describes
what an organization or role must do for another organization or role.
It describes an ~~activity~~. Business requirements begin with the
phrase, ``The organization shall...'' [G:SML:system requirement]s are
derived from business requirements and consist of [g:SML:functional
requirement]s, [g:SML:non-functional requirement]s, and
[g:SML:technical requirement]s

######################################################################
# C
######################################################################

glossary:: COMMENT {SML} = A [g:SML2:structure] to be omitted from the
rendered [g:SML:DOCUMENT]

glossary:: COMPOSITION_DECLARATION {SML} = An [g:SML:ontology rule]
that declares that one division may contain another division

glossary:: CONDITIONAL {SML} = A [g:SML2:structure] to be included in
the rendered document only if a token is defined

glossary:: Comma Separated Value = ([acs:CSV]) a file format in which
each line contains one ``record'' of data fields separated by commas

###

glossary:: cardinality {SML} = The number of elements in a set, as a
property of that set

glossary:: compliance directive {SML} = A written authoritative
statute, regulation, or directive that requires an organization to
comply with a process or standard.  [G:SML:business requirement]s are
often derived from compliance directives.  See also [g:SML:mission
directive]

glossary:: component integration test {SML} = Testing of groups of
related releasable components to verify they satisfy allocated
requirements and work together as designed

glossary:: component test {SML} = Testing of individual releasable
software components to verify they satisfy allocated requirements

glossary:: configuration item {SML} = An [g:SML2:entity] that
represents an aggregation of work products that is designated for
configuration management and treated as a single entity in the
configuration management process

glossary:: confirmation bias {SML} = The tendency to search for,
interpret, favor, and recall information in a way that confirms one's
beliefs or hypotheses, while giving disproportionately less
consideration to alternative possibilities. Also called confirmatory
bias or myside bias.  See
[url:https://en.wikipedia.org/wiki/Confirmation_bias]

glossary:: content {SML} = (1) Text meant to convey meaning.  (2) A
type of markup feature that describes the ~~meaning~~ of [g:SML:text]
which allows authors to establish relationships between
[g:SML1:entity]s in a [g:SML:DOCUMENT]. For example: [g:SML:EXERCISE]s,
[g:SML:SLIDE]s, [g:SML:QUOTATION]s, [g:SML:DEMO], [g:SML:problem]s,
[g:SML:solution]s, [g:SML:test]s, [g:SML:result]s, [g:SML:task]s,
[g:SML:role]s

glossary:: continuous integration {SML} = ([acs:SML:CI]) the practice,
in software engineering, of merging all developer working copies to a
shared mainline several times a day for the purpose of discovering and
solving integration problems as soon as
possible. [cite:wp-continuous-integration]

######################################################################
# D
######################################################################

glossary:: DEFINITION_LIST {SML} = A [g:SML2:structure] that creates a
list of terms and corresponding definitions.  Each definition may
~~only~~ consist of a single [g:SML:paragraph].  Definition lists may
~~not~~ be nested or intermingled with other list types

glossary:: DIVISION_DECLARATION {SML} = An [g:SML:ontology rule] that
declares a division of the specified name exists within the ontology

glossary:: Device Independent = ([acs:DVI]) The native output format
of LaTeX

###

glossary:: data format {SML} = The structure of a computer file

glossary:: data part {SML} = An [g:SML:element] that represents data
about the enclosing [g:SML:division] and is therefore not considered
part of the narrative text. Contrast with [g:SML:narrative part]

glossary:: definition {SML} = A special [g:SML:block] that defines an
key/value pair.  Definitions are limited to a single block of
text. Definitions can declare themselves part of a namespace to
distinguish between duplicate keys from different namespaces.
Definitions can declare themselves a specific alternative to
distinguish between multiple identical keys within the same namespace

glossary:: DEMO {SML} = A [g:SML2:structure] that represents a
demonstration that an instructor might give during a classroom
presentation.  Demos may contain other structures like tables and
figures

glossary:: demonstration {SML} = a procedure to verify system
requirements that cannot be tested otherwise

glossary:: description {SML} = A [g:SML:block] that describes the
contents of a [g:SML:DOCUMENT], [g:SML2:structure], [g:SML2:entity],
or [g:SML:SECTION].  A document description is the same as a document
abstract

glossary:: descriptive markup {SML} = [G:SML:markup] designed to
describe the meaning, structure, or presentation of the content.  See
[g:SML:markup language]. Contrast with [g:SML:procedural markup]

glossary:: development testing {SML} = Testing conducted to establish
whether a new software product or software-based system (or components
of it) satisfies its criteria. The criteria will vary based on the
level of test being performed. Developmental testing in comprised of
the following test levels: (1) [g:SML:unit test], (2) [g:SML:component
test], and (3) [g:SML:component integration test]

glossary:: division {SML} = A [g:SML:part] which is a contiguous
sequence of whole [g:SML:line]s of text possibly including blank
lines.  A division has an ~~unambiguous~~ beginning and end.  The
beginning and end may be either explicit or implicit.  A division may
contain [g:SML:block]s and other divisions. A division may be uniquely
identified by an [a:SML:ID] that may be used to refer to the division
from other parts of the [g:SML:DOCUMENT] or [g:SML:library]

glossary:: DOCUMENT {SML} = A [g:SML2:structure] that represents a
written work about a topic

glossary:: document {SML} = A written work about a topic

glossary:: don't repeat yourself {SML} = ([a:SML:DRY]) a principle of
software development, aimed at reducing repetition of information of
all kinds, especially useful in multi-tier architectures. The DRY
principle is stated as ``Every piece of knowledge must have a single,
unambiguous, authoritative representation within a system.''

######################################################################
# E
######################################################################

glossary:: ENUMERATED_LIST {SML} = (||SML::EnumeratedList||) A
[g:SML2:structure] that creates a list of enumerated items.  Each
enumerated item may ~~only~~ consist of a single [g:SML:paragraph].
Enumerated lists may be nested to any depth and may be used as
sub-lists within [g:SML:BULLET_LIST]s.  See also [g:SML:BULLET_LIST],
[g:SML:DEFINITION_LIST], and [g:SML:STEP_LIST]

glossary:: ENUMERATION_DECLARATION {SML} = An [g:SML:ontology rule]
that declares an allowable value for a defined property

glossary:: EPIGRAPH {SML2} = A [g:SML2:structure] that tells the
publishing application to render the [g:SML:content] as an
[g:SML1:epigraph]

glossary:: EXERCISE {SML} = A [g:SML2:structure] that represents an
exercise a student might work through to better understand concepts
described in the text

glossary:: eXtensible markup Language = ([acs:XML]) a
``meta-language'' used to define markup languages

###

glossary:: element {SML} = A [g:SML:block] that represents a
name/value pair expressing a piece of structured information or
instructing the processor to take some action. See also
[g:SML:property]

glossary:: engineer {SML} = (1) an ~~individual~~ who invents,
designs, and implements systems to solve real world problems, (2) the
~~skill level~~ needed to invent, design and implement systems to
solve real world problems.  Contrast with [g:SML:technician] and
[g:SML:operator]

glossary:: entity {SML1} = A thing of interest to an
organization about which data is held. Entity types are declared in an
[g:SML:ontology]. Entities are represented by
[g:SML:division]s. Entities have properties and are often related to
other entities. See [g:SML:property]

glossary:: entity {SML2} = A [g:SML:division] that represents a thing
of interest to an organization.  Entities defined in this library are:
[g:SML:allocation], [g:SML:assignment], [g:SML:configuration item],
[g:SML:requirement], [g:SML:role], [g:SML:task], and
[g:SML:test]. Contrast with [g:SML2:structure]

glossary:: epanorthosis {SML} = a figure of speech that signifies
emphatic work replacement. ``Thousands, no, millions!'' Often used for
emphasis or sarcasm

glossary:: epigraph {SML1} = A quotation at the beginning of a book,
chapter, etc. suggesting its theme

######################################################################
# F
######################################################################

glossary:: FIGURE {SML} = A [g:SML2:structure] that instructs the
publishing application to insert a figure into the document

glossary:: FOOTER {SML} = A [g:SML2:structure] that instructs the
publishing application to place the specified content at the bottom of
every document page

glossary:: FRAGMENT {SML} = A [g:SML2:structure] containing SML text
to be reused in multiple places

glossary:: Functional Requirements Document {SML} = ([acs:SML:FRD])
Answers the question, ``what does (or should) the system do?''; Serves
as the foundation for system design and development; captures
functional/user requirements to be implemented in a new or enhanced
system; the systems subject matter experts document these requirements
into the requirements traceability matrix, which shows mapping of each
detailed functional requirement to its source (Concept of Operations,
System Boundary Document, Mission Need Statement, and System Security
Plan). This is a complete, user oriented functional and data
requirements for the system which must be defined, analyzed, and
documented to ensure that user and system requirements have been
collected and documented

###

glossary:: feasibility {SML} = The extent to which the benefits of a
new or enhanced system will exceed the total costs and also satisfies
the business requirements

glossary:: file {SML} = A collection of data stored on a permanent
storage device

glossary:: footnote {SML} = A short note of explanation or reference
separated from the main text to prevent disrupting the flow of the
main text

glossary:: format {SML} = (noun) A specification for representing
document content, structure, and presentation; (verb) To transform
document content from one format to another format

glossary:: functional requirement {SML} = A requirement that describes
what a [g:IEEE:system] or [g:SML:system component] must do for a
[g:IEEE:user].  Functional requirements begin with the phrase, ``The
system shall enable the user to...'' Functional requirements are
typically derived from [g:SML:business requirement]s. Functional
requirements are independent of system implementation. See also
[g:SML:non-functional requirement] and [g:SML:system requirement]

######################################################################
# G
######################################################################

glossary:: General Public License = ([acs:GPL]) A software license
designed to ensure software is freely usable by anyone for any
purpose.  The GPL takes away your right to put restrictions on
software use

###

glossary:: glossary {SML} = A list of terms in a special subject,
field, or area of usage, with accompanying definitions

glossary:: glossary definition {SML} = A [g:SML:definition] that
defines a [g:SML:glossary] term.  Glossary definitions are limited to
a single block of text

glossary:: grammar {SML} = In theoretical computer science, a formal
grammar (sometimes simply called a grammar) is a set of formation
rules that describe which strings formed from the alphabet of a formal
language are syntactically valid within the language. A grammar only
addresses the location and manipulation of the strings of the
language. It does not describe anything else about a language, such as
its semantics (i.e. what the strings mean) [cite:wp-formal-grammar]

######################################################################
# H
######################################################################

glossary:: HEADER {SML} = A [g:SML2:structure] that instructs the
publishing application to place the specified content at the top of
every document page

######################################################################
# I
######################################################################

glossary:: include {SML} = An [g:SML:element] that tells the
publishing application to include the [g:SML:text] from another
[g:SML:division]

glossary:: index {SML} = An alphabetically organized listing of terms
and with references to where those terms are used in one or more
documents

glossary:: instructional demonstration {SML} = a description of a
series of tasks that reinforce and illustrate concepts being taught

######################################################################
# K
######################################################################

glossary:: KEYPOINTS {SML} = A [g:SML2:structure] that represents the
key points of a document section

######################################################################
# L
######################################################################

glossary:: LISTING {SML} = A [g:SML2:structure] that instructs the
publishing application to insert a listing into the document

###

glossary:: library {SML} = A collection of related [a:SML]
[g:SML:DOCUMENT]s.  Each document may describe entities,
[g:SML1:entity] properties, and entity relationships conforming to a
pre-defined [g:SML:ontology]

glossary:: library object model {SML} = A model of related object
classes, and the public interfaces of those classes, that describes
the content of an SML [g:SML:library].

glossary:: line {SML} = A single line of raw text from a [a:SML] file
or generated by a [g:SML:script] or [g:SML:plugin].  A line begins in
the first column even if the leading characters are whitespace
characters.  A line ends with a [g:SML:newline] character.  Authors
often wrap lines after approximately 70 characters to improve
readability

######################################################################
# M
######################################################################

glossary:: METADATA {SML} = A [g:SML2:structure] that represents the
metadata about a document

###

glossary:: manuscript {SML} = an author's original typed copy of a
work, as distinguished from the published version of the same.  Like
source code is compiled into an executable program, a manuscript is
published into a finished document

glossary:: markup {SML} = In an [a:SML] file, text strings that
describe the intended meaning, [g:SML1:structure],
[g:SML:presentation], or processing of content, sometimes called
``tags.''  Contrast with [g:SML:content].  See [g:SML:descriptive
markup] and [g:SML:procedural markup]

glossary:: markup language {SML} = A standard for annotating text that
syntactically distinguishes markup from content for the purpose of
describing content ([g:SML:descriptive markup]) or directing how a
processing application should process the content ([g:SML:procedural
markup]).  The term originated from the ``marking up'' of authors'
manuscripts, i.e. the typesetting instructions added by editors

glossary:: mission directive {SML} = A written authoritative statute,
regulation, or directive that allocates a mission to an organization.
[G:SML:business requirement]s are often derived from mission
directives.  See also [g:SML:compliance directive]

glossary:: multiplicity {SML} = A specification of the range of
allowable [g:SML:cardinality] values - the size - that a set may
assume.

######################################################################
# N
######################################################################

glossary:: narrative part {SML} = A [g:SML:part] which is part of the
narrative text and not a data element.  Contrast with [g:SML:data
part]

glossary:: newline {SML} = The character that ends a line of text.
Newline is also known as ``line break,'' ``end-of-line,'' or ``EOL.''
Software and operating systems typically represent newline characters
with one or two control characters. Systems based on ASCII or a
compatible character set use either ||LF|| (Line feed, `||\n||',
||0x0A||, 10 in decimal) or ||CR|| (Carriage return, `||\r||',
||0x0D||, 13 in decimal) individually, or ||CR|| followed by ||LF||
(||CR+LF||, `||\r\n||', ||0x0D0A||). These characters are based on
printer commands: The line feed indicated that one line of paper
should feed out of the printer, and a carriage return indicated that
the printer carriage should return to the beginning of the current
line

glossary:: non-functional requirement {SML} = A type of [g:SML:system
requirement] that defines something a system must ~~be~~ (i.e. be
secure, be maintainable, be scalable, be usable, be available, etc.).
Non-functional requirements are often called `ilities' (security,
maintainability, scalability, usability, availability, etc.).
Non-functional requirements begin with the phrase, ``The system shall
be...'' Non-functional requirements are often derived from
[g:SML:business requirement]s.See also [g:SML:functional requirement]
and [g:SML:technical requirement]

######################################################################
# O
######################################################################

glossary:: ontology {SML} = An explicit formal specification of terms
to represent the entities defined to exist in some area of interest,
the properties of those entities, the relationships that hold among
those entities, and the formal axioms that constrain the
interpretation and well-formed use of these terms.  An ontology is
composed of [g:SML:ontology rule]s

glossary:: ontology rule {SML} = A single declaration that defines an
allowed semantic expression.  An [g:SML:ontology] is composed of a
collection of ontology rules.  Document semantics are validated
against the set of ontology rules.  There are (currently) 5 (five)
types of ontology rules: (1) division declarations, (2) property
declarations, (3) enumeration declarations, (4) composition
declarations, and (5) default value declarations

glossary:: operational baseline {SML} = A [g:IEEE:baseline] that
identifies the system accepted and configured by the users in the
operational environment after a period of on-site test using production
data

glossary:: operator {SML} = (1) an ~~individual~~ who operates a
system, (2) the ~~skill level~~ necessary to operate a system.
Contrast with [g:SML:engineer] and [g:SML:technician]

######################################################################
# P
######################################################################

glossary:: PDFLaTeX = A variation of the LaTeX system that produces
PDF output instead of [a:DVI] output.  See:
[url:https://www.tug.org/applications/pdftex/]

glossary:: PREFORMATTED {SML} = A [g:SML2:structure] that instructs
the publishing application to insert its [g:SML:content] as
preformatted text

glossary:: PROPERTY_DECLARATION {SML} = An [g:SML:ontology rule] that
declares an allowed property for a specified division

glossary:: Perl = A family of high-level, general-purpose,
interpreted, dynamic programming languages. The languages in this
family include Perl 5 and Perl 6. See: [url:https://www.perl.org/]

###

glossary:: paragraph {SML} = A self-contained unit of a discourse in
writing dealing with a particular point or idea.  A paragraph consists
of one or more sentences

glossary:: parser {SML} = A software artifact that performs syntactic
analysis of text (a sequence of tokens) to check for correct syntax
and build a data structure implicit in the input tokens

glossary:: part {SML} = A syntactic unit of document content.  SML
syntax defines three types of parts: [g:SML:division]s,
[g:SML:block]s, and [g:SML:string]s

glossary:: pattern {SML} = a general reusable solution to a commonly
occurring problem within a given context in software design. A design
pattern is not a finished design that can be transformed directly into
code. It is a description or template for how to solve a problem that
can be used in many different situations

glossary:: plugin {SML} = An [g:SML:element] that instructs the SML
parser to run a program and place the output into the document.
Plugins have access to the [g:SML:library object model].  See also
[g:SML:script]

glossary:: presentation {SML} = The appearance of content. A type of
markup feature that describes the appearance of [g:SML:content]. For
example: bold, italics, line break, page break, font size, text
justification

glossary:: problem {SML} = An [g:SML2:entity] that describes a problem
to be solved

glossary:: procedural markup {SML} = [G:SML:markup] designed to direct
a processing application how to process text.  See [g:SML:markup
language].  Contras with [g:SML:descriptive markup]

glossary:: property {SML} = A characteristic attribute that describes
an [g:SML1:entity].  Allowed properties are declared in the
[g:SML:ontology]. Properties are expressed using
[g:SML:element]s. Property values have [g:SML:cardinality] of either
one or many, meaning, they may be either single-valued or
multi-valued.  Properties may be required or optional.  Properties may
also be ``imply-only'' meaning that them may ~~not~~ be explicitly
declared using elements, but may ~~only~~ be inferred by the
[g:SML:reasoner].

glossary:: publish {SML1} = A program that converts minimally formatted
text files into published documents

glossary:: publish {SML2} = To issue an informational work product for
distribution to an indented audience

######################################################################
# Q
######################################################################

glossary:: QUOTATION {SML} = A [g:SML2:structure] that represents a
quotation

######################################################################
# R
######################################################################

glossary:: Rich Text Format = ([acs:RTF]) the document interchange
format used by Microsoft Word.

###

glossary:: reasoner {SML} = A semantic reasoner, reasoning engine,
rules engine, or simply a reasoner, is a piece of software able to
infer logical consequences from a set of asserted facts or axioms. The
notion of a semantic reasoner generalizes that of an inference engine,
by providing a richer set of mechanisms to work with. The inference
rules are commonly specified by means of an ontology language, and
often a description language. Many reasoners use first-order predicate
logic to perform reasoning; inference commonly proceeds by forward
chaining and backward chaining [cite:wp-semantic-reasoner]

glossary:: reference {SML} = Same as a [g:SML:SOURCE]

glossary:: regression test {SML} = In software maintenance, the
rerunning of test cases that previously executed correctly in order to
detect errors introduced by the maintenance activity

glossary:: release {SML} = A configuration management activity wherein
a specific version of a software product is made available for use

glossary:: requirement {SML} = An [g:SML2:entity] that represents a
statement of needed organizational or system capability.  Requirements
for organizational capability are called [g:SML:business
requirement]s.  Requirements for system capability are called
[g:SML:system requirement]s

glossary:: requirements traceability matrix {SML} = ([acs:SML:RTM]) A
document or document part that provides a method for tracing
requirements and their implementation through the development process

glossary:: result {SML} = An [g:SML2:entity] that represents the
result of a test

glossary:: revisions {SML} = A [g:SML2:structure] that describes the
revision history of a document

glossary:: role {SML} = A [g:SML2:entity] that represents the role of
an individual, that is, a description of the individual's
responsibilities.  A single individual may serve multiple roles

######################################################################
# S
######################################################################

glossary:: SECTION {SML} = A [g:SML2:structure] that begins with a
section heading and contains information about a specific topic.
Authors may create section headings at different levels to create a
hierarchy of sections to organize document content

glossary:: SIDEBAR {SML} = A [g:SML2:structure] that instructs the
publishing application to insert its [g:SML:content] as a side bar

glossary:: SLIDE {SML} = A [g:SML2:structure] that describes the
content of a presentation slide that an instructor might use to teach
a class

glossary:: SML file {SML} = A [g:SML:file] containing [a:SML]
formatted [g:SML:text]

glossary:: SOURCE {SML} = A [g:SML2:structure] that describes a
cite-able bibliographic source

glossary:: STEP_LIST {SML} = A [g:SML2:structure] that creates a list
of procedural steps.  When rendered in the document the list will be
numbered.  Numbering resets to 1 (one) at the beginning of a new
section

glossary:: Semantic Manuscript Language {SML} = ([a:SML]) A
minimalistic plain text [g:SML:descriptive markup] language designed
to be human readable, easy to edit, easy to automatically generate,
able to express and validate semantic relationships, and contain
everything necessary to publish professional documentation from plain
text manuscripts

###

glossary:: script {SML} = An [g:SML:element] that instructs the SML
parser to run a script and place the output into the document. Scripts
~~do not~~ have access to the [g:SML:library object model]. See also
[g:SML:plugin]

glossary:: semantic {SML} = relating to ~~meaning~~ in language or
logic

glossary:: semantics {SML} = The set of rules that governs the meaning
of document content. For [a:SML] these rules are defined in an
[g:SML:ontology]

glossary:: shall statement {SML} = A definitive statement of a
requirement.  Requirements are meant to communicate needs between
stakeholders and solution providers. Requirements should be easy to
understand for users and solution providers. One common way to
document a system requirement is stating what the system ~~shall~~
do. See also [g:SML:use case]

glossary:: solution {SML} = A [g:SML2:entity] that describes the
solution to a problem

glossary:: special feature {SML} = A feature that enables document
authors to minimize the maintenance burden of updating documents and
to automate certain document content generation

glossary:: string {SML} = A [g:SML:part] which is a sequence of one or
more characters that may be a ~~partial~~ line or may span one or more
~~whole or partial~~ lines. A string may span multiple [g:SML:line]s
but may ~~not~~ span multiple [g:SML:block]s.  Some strings describe
how to present the text like bold, italics, underlined, fixed width,
superscript, and subscript strings.  Other strings are used to
represent cross references or other text with special meaning.
Strings may be nested inside other strings. The content of a
[g:SML:block] is a string. See also [g:SML:line], [g:SML:block], and
[g:SML:division]

glossary:: structure {SML1} = The way content is organized.  A type of
markup feature used to ~~organize~~ [g:SML:DOCUMENT] content. For
example: sentences, paragraphs, [g:SML:SECTION] hierarchies,
[g:SML:TABLE]s, [g:SML:FIGURE]s, [g:SML:LISTING]s

glossary:: structure {SML2} = A [g:SML:division] that organizes
content. Names of SML structures are reserved words and therefore
capitalized. Structures are part of the core SML specification and are
therefore the same in all SML libraries. SML structures are:
[g:SML:ATTACHMENT], [g:SML:AUDIO], [g:SML:BARE_TABLE],
[g:SML:BULLET_LIST], [g:SML:COMMENT], [g:SML:COMPOSITION_DECLARATION],
[g:SML:CONDITIONAL], [g:SML:DEFINITION_LIST], [g:SML:DEMO],
[g:SML:DIVISION_DECLARATION], [g:SML:DOCUMENT],
[g:SML:ENUMERATED_LIST], [g:SML:ENUMERATION_DECLARATION],
[g:SML2:EPIGRAPH], [g:SML:EXERCISE], [g:SML:FIGURE], [g:SML:FOOTER],
[g:SML:HEADER], [g:SML:KEYPOINTS], [g:SML:LISTING], [g:SML:METADATA],
[g:SML:PREFORMATTED], [g:SML:PROPERTY_DECLARATION], [g:SML:QUOTATION],
[g:SML:FRAGMENT], [g:SML:SECTION], [g:SML:SIDEBAR], [g:SML:SLIDE],
[g:SML:SOURCE], [g:SML:STEP_LIST], [g:SML:TABLE], [g:SML:TABLE_CELL],
[g:SML:TABLE_ROW], [g:SML:TRIPLE], [g:SML:UNIVERSAL],
[g:SML:VERSION_HISTORY], and [g:SML:VIDEO]. Contrast with
[g:SML2:entity]

glossary:: symbol {SML} = A [g:SML:string] which represents a singular
piece of data which is a character, single idea, process, or entity

glossary:: syntax {SML} = The set of rules that defines the
combinations of symbols that are considered to be a correctly
structured document or fragment of a formal language

glossary:: system component {SML} = Any discrete item that is part of
a system or subsystem

glossary:: system requirement {SML} = A requirement that describes
what a system must ~~do~~ or ~~be~~.  There are three types of system
requirements: [g:SML:functional requirement]s, [g:SML:non-functional
requirement]s, and [g:SML:technical requirement]s

glossary:: systems engineering {SML} = The interdisciplinary approach
governing the total technical and managerial effort required to
transform a set of customer needs, expectations, and constraints into
a product solution and support that solution throughout the product's
life. This includes the definition of technical performance measures,
the integration of engineering specialties toward the establishment
of a product architecture, and the definition of supporting life-cycle
processes that balance cost, performance, and schedule objectives.

######################################################################
# T
######################################################################

glossary:: TABLE {SML} = (||SML::Table||) A [g:SML2:structure] that
instructs the publishing application to insert a table into the
document.  Tables include titles (captions) and descriptions.  The
publishing application will automatically generate a table number and
include the table in a list of tables in the document front
matter. Contrast with [g:SML:BARE_TABLE]

glossary:: TABLE_CELL {SML} = (||SML::TableCell||) A
[g:SML2:structure] that represents a single [g:SML:TABLE] cell

glossary:: TABLE_ROW {SML} = (||SML::TableRow||) A [g:SML2:structure]
that represents a single [g:SML:TABLE] row

glossary:: TRIPLE {SML} = (||SML::Triple||) A statement which relates
a subject to an object (subject -> predicate -> object)

###

glossary:: task {SML} = A [g:SML2:entity] that represents a task, a
unit of work to be performed

glossary:: technical requirement {SML} = A [g:SML:requirement] that
describes something a [g:IEEE:system] must ~~do~~ to support another
system function but is not necessarily apparent to a user.  Note the
difference between a ~~technical requirement~~ and a
~~[g:SML:functional requirement]~~.  A ~~technical requirement~~
describes what the system must do for another [g:IEEE:system] or
[g:SML:system component].  A ~~functional requirement~~ describes what
the system must do for a ~~user~~.  Technical requirements begin with
the phrase, ``The system shall...''  Technical requirements may be
implementation specific/dependent. See also DHS definition of
[g:SML:system requirement].  Technical requirements are derived from
[g:SML:functional requirement]s and [g:SML:non-functional
requirement]s.

glossary:: technician {SML} = (1) an ~~individual~~ who deploys,
configures, and repairs systems; (2) the ~~skill level~~ needed to
deploy, configure and repair systems. Contrast with [g:SML:engineer]
and [g:SML:operator]

glossary:: test {SML} = An [g:SML2:entity] that describes a test, a
method of proving (verifying) a solution solves a problem

glossary:: text {SML} = A string of 7-bit ASCII encoded characters,
any length, may contain white space characters (space, tab, newline).
See also [g:SML:string], [g:SML:markup] and [g:SML:content]

glossary:: title {SML} = A [g:SML:block] that is a brief name,
description, or heading of a [g:SML:DOCUMENT], [g:SML2:structure],
[g:SML2:entity], or [g:SML:SECTION]

glossary:: tribal knowledge {SML} = Any unwritten information that is
not commonly known by others within a company.  This term is used most
when referencing information that may need to be known by other in
order to produce quality product or service

######################################################################
# U
######################################################################

glossary:: UNIVERSAL {SML} = A category of [g:SML:element] that may
exist anywhere in SML text, not just in specified divisions

###

glossary:: Unified Modeling Language {OMG} = ([acs:OMG:UML]) a
general-purpose, developmental, modeling language in the field of
software engineering, that is intended to provide a standard way to
visualize the design of a system [cite:wp-uml]

glossary:: unit test {SML} = The lowest level of automated test, often
called an ``assertion,'' that tests a single program function or
configuration for expected success or failure

glossary:: unit test case {SML} = (1) An automated, repeatable
[g:IEEE:test case] containing [g:SML:unit test]s; (2) A unit test case
description file that uniquely identifies and describes a unit test
case and serves to establish traceability between unit test cases,
test results, configuration items, and requirements.  A unit test case
traces to a single test result file

glossary:: use case {SML} = A technique for capturing functional
requirements of business systems and, potentially, of an IT system to
support the business system.  The use case model uses ``Actors'' and
``use cases.'' An Actor is the representation of a person or system
which exists outside the system under study and who (or which)
performs a sequence of activities in a dialog with the system.  A Use
Case represents a single interaction between a primary actor (who
initiates the interaction) and other (secondary) actors, and the
system itself. The interaction is presented as a sequence of simple
steps

######################################################################
# V
######################################################################

glossary:: VERSION_HISTORY {SML} = A [g:SML2:structure] that contains
a history of version descriptions of a document

glossary:: VIDEO {SML} = A [g:SML2:structure] that instructs the
publishing application to insert a video clip into the document

###

glossary:: variable definition {SML} = A [g:SML:definition] that
defines a key/value pair where the key is the variable name and the
value is the definition.  Variable definitions are limited to a single
block of text

glossary:: version {SML} = An identifier that represents the state of
a work product at some point in time (i.e. v2.13.4). The Semantic
Versioning specification defines a commonly used versioning
system. See [url:http://semver.org/].

glossary:: versioning {SML} = The activity of identifying the
[g:SML:version] of a work product.

glossary:: video {SML} = A [g:SML2:structure] that instructs the
publishing application to insert a video clip into the document

<<<FRAGMENT
