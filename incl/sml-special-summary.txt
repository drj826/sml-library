>>>RAW.sml-special-summary

>>>COMMENT

$Author: don.johnson $

$Revision: 15125 $

$Date: 2013-07-07 09:24:43 -0600 (Sun, 07 Jul 2013) $

<<<COMMENT

#---------------------------------------------------------------------

: !!Includes.!! ([ref:include]) Content from other files can be
included (reused) in the document using the ||include::|| statement.
This feature enables you to modularize your document content.  Files
can be ``included'' 6 ways: as-is, flat, as a section, as a region,
hidden, or raw.  You may also pass named values to be substituted in
the included files effectively turning any included file into a
template.  You may also include a file iteratively, using different
values for each iteration.  This ``include'' feature provides
additional functions not listed here.  See the detailed description in
[ref:include].

index:: includes; include

:

  include:: my-other-division

  include::*: my-section

  * include:: my-section

  include::item=rq-291: incl/summary.txt

---

: !!Comment Lines and Blocks.!! ([ref:comments]) SML gives you two
ways to insert comment lines.  First, any line beginning with ||#|| in
the first column is considered a comment, making it easy to `comment
out' individual lines of text. Second, any division of text that
begins with ||>>>COMMENT|| and ends with ||<<<COMMENT|| is considered
a comment, making it easy to `comment out' whole regions of text.

index:: comments; comment blocks

:

  # comment line

  >>>COMMENT

  Block of
  comments

  <<<COMMENT

---

: !!In-Line Comments.!! ([ref:in-line-comments]) SML gives you a way
to make in-line comments; that is, short comments embedded in a line
of text using the form {lit:[# comment ]}.  Three special forms of
in-line comments (||#v||, ||#a||, and ||#d||) are automatically
updated by the publish program to contain the current version, author,
and date from the SVN change control system.

index:: in-line comments

:

  [# my in-line comment]

  [#v:incl/glossary-sml.txt:]

  [#a:incl/glossary-sml.txt:]

  [#d:incl/glossary-sml.txt:]

---

: !!Hidden Text.!! ([ref:hidden-text]) SML allows you to hide text.
Hidden text is like commented text, except that data elements within
hidden text are known to the ||publish|| program, and can be used in
other parts of the document.

index:: hidden text

:

  >>>HIDE

  This text is hidden.

  <<<HIDE

---

: !!To Do List.!! ([ref:to-do-items]) During the development and
review of a document you might want to leave notes to yourself or
others on you team about things that need to be changed or updated in
the document content.  The ~~to-do~~ item feature lets you put these
notes right in the content of the document to remind you of what needs
to be done.

index:: to-do list

:

  [ ] To do item

  [!] Urgent item

  [.] Work started

  [-] Item canceled

  [X] Item completed

---

: !!Generated Content.!! ([ref:generated-content]) Using the
`||generate:||' directive, the ||publish|| program can automatically
generate; (1) problem domain listings, (2) solution domain listings,
(3) prioritized problem listings, (4) prioritized solution listings,
(5) associated problem listings and (6) associated solution listings.

index:: generated content

:

  generate: problem-domain-listing

  generate: solution-domain-listing

  generate: prioritized-problem-listing

  generate: prioritized-solution-listing

  generate: associated-problem-listing

  generate: associated-solution-listing

---

: !!Inserted Content.!! ([ref:inserted-content]) Using the
`||insert:||' directive, the ||publish|| program can automatically
insert reusable content such as the narrative portion of a problem or
solution.

index:: inserted content

:

  insert: narrative(ci-000123)

---

: !!Scripts.!! ([ref:scripts]) Using the `||script:||' directive, the
||publish|| program will run an external script or program and insert the
output into the document.  If that output includes additional
`||script:||' directives, the ||publish|| program will recursively
continue to run them until they are all run and their output included
in the document.

index:: scripts

:

  script: portscan.pl

---

: !!Conditional Text.!! ([ref:conditional-text]) Sometimes two
documents are essentially the same with small differences attributable
to different uses of the document.  For instance, you might have a
training module about Red Linux that should be slightly different if
you're using Red Hat 9.0 as opposed to Fedora Core 4.  The conditional
text feature enables you to include the text for both version in the
document and define at publish time which to include.

index:: conditional text

:

  define: RH9

  >>>CONDITIONAL.RH9

  Content present if
  RH9 is true

  <<<CONDITIONAL

---

: !!Traceability.!! ([ref:systems-engineering]) SML gives you a
structure method to define ~~problems~~, ~~solutions~~ and ~~tests~~.
Problems can be mapped to solutions, solutions can be mapped to tests,
and so on.  This feature is designed to add rigor to your systems
development processes and documentation.

index:: traceability

:

  problem:: rq-000001

  solution:: ci-000002

  test:: tc-000003

---

: !!Ignorable Content.!! You can choose to ignore the following blocks
of content at publishing time: attachments, epigraphs, audio, video,
demos, exercises, keypoints, problems, slides, solutions, tasks, tests
and results.

index:: ignorable content

:

  publish.pl --noattachments

---

: !!Variables.!! You can assign values to variables in your document
to insert the same text over and over and only have to define it once.

index:: variables

:

  var:: truth-count = 6,725

  [var:truth-count]

---

: !!Reusable Content.!! ([ref:reusable-content]) You can reuse
elements of content; they are identified by their associated labels.

index:: reusable content

:

  [title:rq-000001]

  [description:tc-000002]

  [lookup:author:doc-001]

---

: !!Revision Summary!! ([ref:revision-summary]) You can insert a
revision summary of your document that will list (1) version, (2)
date, and (3) summary of changes for a series of document revisions.

index:: revision summary

:

  >>>REVISIONS

  rev: 0.1 = 2010-10-19 = Initial draft

  rev: 0.2 = 2011-02-01 = Added summary table

  <<<REVISIONS

######################################################################
# Local Emacs Variables

# Local Variables:
# mode: outline
# coding: us-ascii
# fill-column: 70
# End:

######################################################################

<<<RAW
