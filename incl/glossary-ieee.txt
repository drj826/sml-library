>>>RAW.glossary-ieee

# IEEE Vocabulary

# This vocabulary uses acronyms defined in acronyms-ieee.txt

#######################################################################
# A
######################################################################

glossary:: acceptance testing {IEEE} = (A) Testing conducted to
establish whether a [g:IEEE:system] satisfies its acceptance criteria
and to enable the customer to determine whether to accept the
system. (B) Formal testing conducted to enable a user, customer, or
other authorized entity to determine whether to accept a system or
component. This is analogous to qualification testing in IEEE/EIA Std
12207.0-1996 (B21). Another commonly used synonym is
[g:IEEE:validation] testing. [cite:ieee-std-829-2008]

glossary:: acquirer {IEEE} = Stakeholder that acquires or procures a
product or service from a supplier. NOTE: The acquirer could be one of
the following: buyer, customer, owner,
purchaser. [cite:ieee-std-12207-2008] [cite:ieee-std-15288-2008]

glossary:: acquisition {IEEE} = Process of obtaining a system,
software product or software service. [cite:ieee-std-12207-2008]

glossary:: activity {IEEE} = (1) Set of cohesive tasks of a
process. [cite:ieee-std-12207-2008] [cite:ieee-std-15288-2008] (2) An
element of work performed during the implementation of a process. An
activity normally has an expected duration, cost, and resource
requirements. Activities are often subdivided into
tasks. [cite:ieee-std-829-2008]

glossary:: address {IEEE} = To deal with, to take into consideration;
(specifically) to decide whether and when a defined documentation
topic is to be included, either directly or by reference to another
document. Make a decision as to whether an item is to be recorded
prior to the test execution (in a tool or not in a tool), recorded
during the test execution, recorded post-test execution, not recorded
(addressed by the process), or excluded. [cite:ieee-std-829-2008]

glossary:: agreement {IEEE} = mutual acknowledgment of terms and
conditions under which a working relationship is
conducted. [cite:ieee-std-12207-2008] [cite:ieee-std-15288-2008]

glossary:: allocated baseline {IEEE} = In [g:IEEE:configuration
management], the initial approved specifications governing the
development of [g:IEEE:configuration item]s that are part of a higher
level configuration item. Contrast with: developmental configuration;
[g:IEEE:functional baseline]; [g:IEEE:product baseline]. See also:
[g:IEEE:allocated configuration
identification]. [cite:ieee-std-610-12-1990]

glossary:: allocated configuration identification {IEEE} = In
[g:IEEE:configuration management], the current approved specifications
governing the development of [g:IEEE:configuration item]s that are
part of a higher level configuration item.  Each specification defines
the functional characteristics that are allocated from those of the
higher level configuration item, establishes the tests required to
demonstrate achievement of its allocated functional characteristics,
delineates necessary interface requirements with other associated
configuration items, and establishes design constraints, if
any. Contrast with: [g:IEEE:functional configuration identification];
[g:IEEE:product configuration identification]. See also
[g:IEEE:allocated baseline]. [cite:ieee-std-610-12-1990]

glossary:: anomaly {IEEE} = Anything observed in the documentation or
operation of software or system that deviates from expectations based
on previously verified software products, reference documents, or
other sources of indicative behavior. (adopted from IEEE Std
610.12-1990 (B3)) [cite:ieee-std-829-2008]

glossary:: architecture {IEEE} = (1) The fundamental organization of a
system embodied in its components, their relationships to each other
and to the environment and the principles guiding its design and
evolution [cite:ieee-std-1471-2000] [cite:ieee-std-15288-2008] (2) The
organizational structure of a [g:IEEE:system] or
[g:IEEE:component]. See also [g:IEEE:component]; [g:IEEE:module];
[g:IEEE:subprogram]; [g:IEEE:routine]. [cite:ieee-std-610-12-1990]

glossary:: assertion {IEEE} = A logical expression specifying a
program state that must exist or a set of conditions that program
variables must satisfy at a particular point during program
execution. Types include input assertion, loop assertion, output
assertion. See also [g:IEEE:invariant]; [g:IEEE:proof of
correctness]. [cite:ieee-std-610-12-1990]

glossary:: audit {IEEE} = (1) An independent examination of a work
product or set of work products to assess compliance with
specifications, standards, contractual agreements, or other
criteria. See also [g:IEEE:functional configuration audit];
[g:IEEE:physical configuration audit]. [cite:ieee-std-610-12-1990],
(2) Independent assessment of software products and processes
conducted by an authorized person in order to assess compliance with
requirements. [cite:ieee-std-12207-2008], (3) systematic, independent
and documented process for obtaining audit evidence and evaluating it
objectively to determine the extent to which audit criteria are
fulfilled. [cite:ieee-std-15288-2008]

######################################################################
# B
######################################################################

glossary:: baseline {IEEE} = (1) A specification or product that has
been formally reviewed and agreed upon, that thereafter serves as the
basis for further development, and that can be changed only through
formal change control procedures. [cite:ieee-std-15288-2008] (2) A
document or a set of such documents formally designated and fixed at a
specific time during the life cycle of a configuration item. Note:
Baselines, plus approved changes from those baselines, constitute the
current configuration identification. See also [g:IEEE:allocated
baseline]; developmental configuration; [g:IEEE:functional baseline];
[g:IEEE:product baseline].  (3) Any agreement or result designated and
fixed at a given time, from which changes require justification and
approval. [cite:ieee-std-610-12-1990] [cite:ieee-std-12207-2008]

glossary:: block diagram {IEEE} = A diagram of a system, computer, or
device in which the principal parts are represented by suitably
annotated geometrical figures to show both the functions of the parts
and their functional relationships.  Syn: [g:IEEE:configuration
diagram]; [g:IEEE:system resources chart]. See also [g:IEEE:box
diagram]; [g:IEEE:bubble chart]; [g:IEEE:flowchart]; [g:IEEE:graph];
[g:IEEE:input-process-output chart]; [g:IEEE:structure
chart]. [cite:ieee-std-610-12-1990]

glossary:: box diagram {IEEE} = A [g:IEEE:control flow diagram]
consisting of a rectangle that is subdivided to show sequential steps,
if-then-else conditions, repetition, and case conditions. Syn:
[g:IEEE:Chapin chart]; [g:IEEE:Nassi-Shneiderman chart];
[g:IEEE:program structure diagram]. See also [g:IEEE:block diagram];
[g:IEEE:bubble chart]; [g:IEEE:flowchart]; [g:IEEE:graph];
[g:IEEE:input-process-output chart]; [g:IEEE:program structure
diagram]; [g:IEEE:structure chart].  [cite:ieee-std-610-12-1990]

glossary:: bubble chart {IEEE} = A data flow, data structure, or other
diagram in which entities are depicted with circles (bubbles) and
relationships are represented by links drawn between the circles. See
also: [g:IEEE:block diagram]; [g:IEEE:box diagram];
[g:IEEE:flowchart]; [g:IEEE:graph]; [g:IEEE:input-process-output
chart]; [g:IEEE:structure chart]. [cite:ieee-std-610-12-1990]

glossary:: build {IEEE} = An operational [g:IEEE:version] of a
[g:IEEE:system] or [g:IEEE:component] that incorporates a specified
subset of the capabilities that the final product will
provide. [cite:ieee-std-610-12-1990]

######################################################################
# C
######################################################################

glossary:: Chapin chart {IEEE} = See [g:IEEE:box
diagram]. [cite:ieee-std-610-12-1990]

glossary:: Configuration Control Board {IEEE} = ([acs:IEEE:CCB]) A
group of people responsible for evaluating and approving or
disapproving proposed changes to configuration items, and for ensuring
implementation of approved changes. Syn: change control board. See
also: [g:IEEE:configuration control]. [cite:ieee-std-610-12-1990]

glossary:: Critical Design Review {IEEE} = ([acs:IEEE:CDR]) (1) A
review conducted to verify that the detailed design of one or more
[g:IEEE:configuration item]s satisfy specified requirements; to
establish the compatibility among the configuration items and other
items of equipment, facilities, software, and personnel; to assess
risk areas for each [g:IEEE:configuration item]; and, as applicable,
to assess the results of producibility analysis, review preliminary
hardware product specifications, evaluate preliminary test planning,
and evaluate the adequacy of preliminary operation and support
documents. See also [g:IEEE:Preliminary Design Review]; [g:IEEE:system
design review].  (2) A review as in (1) of any hardware or software
[g:IEEE:component]. [cite:ieee-std-610-12-1990]

###

glossary:: call graph {IEEE} = A diagram that identifies the modules
in a system or computer program and shows which modules call one
another.  Note: The result is not necessarily the same as that shown
in a [g:IEEE:structure chart]. Syn: [g:IEEE:call tree]; [g:IEEE:tier
chart]. Contrast with: [g:IEEE:structure chart]. See also
[g:IEEE:control flow diagram]; [g:IEEE:data flow diagram];
[g:IEEE:data structure diagram]; [g:IEEE:state
diagram]. [cite:ieee-std-610-12-1990]

glossary:: call tree {IEEE} = See: [g:IEEE:call
graph]. [cite:ieee-std-610-12-1990]

glossary:: checkout {IEEE} = Testing conducted in the operational or
support environment to ensure that a software product performs as
required after installation. (adopted from IEEE Std 610.12-1990 (B3))
[cite:ieee-std-829-2008]

glossary:: closed subroutine {IEEE} = A [g:IEEE:subroutine] that is
stored at one given location rather than being copied into a computer
program at each place that it is called. Contrast with: [g:IEEE:open
subroutine]. [cite:ieee-std-610-12-1990]

glossary:: cohesion {IEEE} = The manner and degree to which the tasks
performed by a single software module are related to one
another. Types include coincidental, communicational, functional,
logical, procedural, sequential, and temporal.  Syn: [g:IEEE:module
strength]. Contrast with: [g:IEEE:coupling]. See also
[g:IEEE:coincidental cohesion]; [g:IEEE:communicational cohesion];
[g:IEEE:functional cohesion]; [g:IEEE:logical cohesion];
[g:IEEE:procedural cohesion]; [g:IEEE:sequential cohesion];
[g:IEEE:temporal cohesion]. [cite:ieee-std-610-12-1990]

glossary:: coincidental cohesion {IEEE} = A type of [g:IEEE:cohesion]
in which the tasks performed by a software module have no functional
relationship to one another. Contrast with: [g:IEEE:communicational
cohesion]; [g:IEEE:functional cohesion]; [g:IEEE:logical cohesion];
[g:IEEE:procedural cohesion]; [g:IEEE:sequential cohesion];
[g:IEEE:temporal cohesion]. [cite:ieee-std-610-12-1990]

glossary:: common coupling {IEEE} = See: [g:IEEE:common-environment
coupling]. [cite:ieee-std-610-12-1990]

glossary:: common-environment coupling {IEEE} = A type of
[g:IEEE:coupling] in which two software modules access a common data
area. Syn: [g:IEEE:common coupling]. Contrast with: [g:IEEE:content
coupling]; [g:IEEE:control coupling]; [g:IEEE:data coupling];
[g:IEEE:hybrid coupling]; [g:IEEE:pathological
coupling]. [cite:ieee-std-610-12-1990]

glossary:: communicational cohesion {IEEE} = A type of
[g:IEEE:cohesion] in which the tasks performed by a software module
use the same input data or contribute to producing the same output
data. Contrast with: [g:IEEE:coincidental cohesion];
[g:IEEE:functional cohesion]; [g:IEEE:logical cohesion];
[g:IEEE:procedural cohesion]; [g:IEEE:sequential cohesion];
[g:IEEE:temporal cohesion]. [cite:ieee-std-610-12-1990]

glossary:: component {IEEE} = One of the parts that make up a
system. A component may be hardware or software and may be subdivided
into other components. NOTE: The terms ``module,'' ``component,'' and
[g:IEEE:unit] are often used interchangeably or defined to be
sub-elements of one another in different ways depending upon the
context. The relationship of these terms is not yet
standardized. [cite:ieee-std-610-12-1990]

glossary:: component integration test {IEEE} = Same as
[g:IEEE:component integration testing]

glossary:: component integration testing {IEEE} = Testing of groups of
related components. [cite:ieee-std-829-2008]

glossary:: component test {IEEE} = Same as [g:IEEE:component testing]

glossary:: component testing {IEEE} = Testing of individual hardware
or software components. [cite:ieee-std-829-2008]

glossary:: configuration control {IEEE} = An element of
[g:IEEE:configuration management], consisting of the evaluation,
coordination, approval or disapproval, and implementation of changes
to [g:IEEE:configuration item]s after formal establishment of their
[g:IEEE:configuration identification].  Syn: change control. Contrast
with: [g:IEEE:configuration identification]; [g:IEEE:configuration
status accounting]. See also [g:IEEE:Configuration Control Board];
[g:IEEE:deviation]; [g:IEEE:engineering change]; [g:IEEE:interface
control]; [g:IEEE:notice of revision]; [g:IEEE:specification change
notice]; [g:IEEE:waiver]. [cite:ieee-std-610-12-1990]

glossary:: configuration item {IEEE} = ([acs:IEEE:CI]) An aggregation
of hardware, software, or both, that is designated for
[g:IEEE:configuration management] and treated as a single entity in
the configuration management process. [cite:ieee-std-610-12-1990]

glossary:: configuration item development record {IEEE} = A document
used in [g:IEEE:configuration management], describing the development
status of a [g:IEEE:configuration item] based on the results of
configuration audits and design reviews.  See also
[g:IEEE:configuration index]; [g:IEEE:configuration status
accounting]. [cite:ieee-std-610-12-1990]

glossary:: configuration management {IEEE} = ([acs:IEEE:CM]) A
discipline applying technical and administrative direction and
surveillance to: identify and document the functional and physical
characteristics of a [g:IEEE:configuration item], control changes to
those characteristics, record and report change processing and
implementation status, and verify compliance with specified
requirements. [cite:ieee-std-610-12-1990]

glossary:: configuration status accounting {IEEE} = An element of
[g:IEEE:configuration management], consisting of the recording and
reporting of information needed to manage a configuration effectively.
This information includes a listing of the approved configuration
identification, the status of proposed changes to the configuration,
and the implementation status of approved changes. Contrast with:
[g:IEEE:configuration control]; [g:IEEE:configuration identification].
See also: [g:IEEE:configuration index]; [g:IEEE:configuration item
development record]. [cite:ieee-std-610-12-1990]

glossary:: consistency {IEEE} = The degree of uniformity,
standardization, and freedom from contradiction among the documents or
parts of a system or component. See also
[g:IEEE:traceability]. [cite:ieee-std-610-12-1990]

glossary:: content coupling {IEEE} = A type of [g:IEEE:coupling] in
which some or all of the contents of one software module are included
in the contents of another module. Contrast with:
[g:IEEE:common-environment coupling]; [g:IEEE:control coupling];
[g:IEEE:data coupling]; [g:IEEE:hybrid coupling]; [g:IEEE:pathological
coupling]. [cite:ieee-std-610-12-1990]

glossary:: contract {IEEE} = Binding agreement between two parties,
especially enforceable by law, or a similar internal agreement wholly
within an organization. [cite:ieee-std-12207-2008]

glossary:: control coupling {IEEE} = A type of [g:IEEE:coupling] in
which one software module communicates information to another module
for the explicit purpose of influencing the latter module's
execution. Contrast with: [g:IEEE:common-environment coupling];
[g:IEEE:content coupling]; [g:IEEE:data coupling]; [g:IEEE:hybrid
coupling]; [g:IEEE:pathological coupling]. [cite:ieee-std-610-12-1990]

glossary:: control flow diagram {IEEE} = A diagram that depicts the
set of all possible sequences in which operations may be performed
during the execution of a system or program. Types include [g:IEEE:box
diagram], [g:IEEE:flowchart], [g:IEEE:input-process-output chart],
[g:IEEE:state diagram].  Contrast with: [g:IEEE:data flow
diagram]. See also [g:IEEE:call graph]; [g:IEEE:structure
chart]. [cite:ieee-std-610-12-1990]

glossary:: coroutine {IEEE} = A routine that begins execution at the
point at which operation was last suspended, and that is not required
to return control to the program or subprogram that called
it. Contrast with: [g:IEEE:subroutine]. [cite:ieee-std-610-12-1990]

glossary:: coupling {IEEE} = The manner and degree of interdependence
between software modules. Types include [g:IEEE:common-environment
coupling], [g:IEEE:content coupling], [g:IEEE:control coupling],
[g:IEEE:data coupling], [g:IEEE:hybrid coupling], and
[g:IEEE:pathological coupling]. Contrast with:
[g:IEEE:cohesion]. [cite:ieee-std-610-12-1990]

glossary:: concept phase {IEEE} = (1) The period of time in the
[g:IEEE:software development cycle] during which the user needs are
described and evaluated through documentation (for example, statement
of needs, advance planning report, project initiation memo,
feasibility studies, system definition, documentation, regulations,
procedures, or policies relevant to the
project). [cite:ieee-std-1002-1987], (2) The initial phase of a
software development project, in which the user needs are described
and evaluated through documentation (for example, statement of needs,
advance planning report, project initiation memo, feasibility studies,
system definition, documentation, regulations, procedures, or policies
relevant to the project). [cite:ieee-std-1012-1986],
[cite:ieee-std-610-12-1990]

glossary:: configuration diagram {IEEE} = See: [g:IEEE:block
diagram]. [cite:ieee-std-610-12-1990]

glossary:: configuration identification {IEEE} = (1) An element of
[g:IEEE:configuration management], consisting of selecting the
[g:IEEE:configuration item]s for a [g:IEEE:system] and recording their
functional and physical characteristics in technical documentation.
Contrast with: [g:IEEE:configuration control]; [g:IEEE:configuration
status accounting].  (2) The current approved technical documentation
for a [g:IEEE:configuration item] as set forth in specifications,
drawings, associated lists, and documents referenced therein. See also
[g:IEEE:allocated configuration identification]; [g:IEEE:functional
configuration identification]; [g:IEEE:product configuration
identification]; [g:IEEE:baseline]. [cite:ieee-std-610-12-1990]

glossary:: configuration index {IEEE} = A document used in
[g:IEEE:configuration management], providing an accounting of the
[g:IEEE:configuration item]s that make up a product. See also
[g:IEEE:configuration item development record]; [g:IEEE:configuration
status accounting]. [cite:ieee-std-610-12-1990]

glossary:: criticality {IEEE} = The degree of impact that a
requirement, module, error, fault, failure, or other characteristic
has on the development or operation of a
system. [cite:ieee-std-829-2008]

glossary:: customer {IEEE} = Organization or person that receives a
product or service. NOTE 1: A customer can be internal or external to
the organization.  NOTE 2: This definition is adapted from ISO 9000:
2005.  NOTE 3: Other terms commonly used for customer are acquirer,
buyer, and purchaser. [cite:ieee-std-12207-2008]
[cite:ieee-std-15288-2008]

######################################################################
# D
######################################################################

glossary:: data coupling {IEEE} = A type of [g:IEEE:coupling] in which
output from one software module serves as input to another
module. Syn: [g:IEEE:input-output coupling]. Contrast with:
[g:IEEE:common-environment coupling], [g:IEEE:content coupling];
[g:IEEE:control coupling]; [g:IEEE:hybrid coupling];
[g:IEEE:pathological coupling]. [cite:ieee-std-610-12-1990]

glossary:: data flow diagram {IEEE} = ([acs:IEEE:DFD]) A diagram that
depicts data sources, data sinks, data storage, and processes
performed on data as nodes, and logical flow of data as links between
the nodes. Syn: [g:IEEE:data flowchart]; [g:IEEE:data flow graph].
Contrast with: [g:IEEE:control flow diagram]; [g:IEEE:data structure
diagram]. [cite:ieee-std-610-12-1990]

glossary:: data flow graph {IEEE} = See: [g:IEEE:data flow
diagram]. [cite:ieee-std-610-12-1990]

glossary:: data flowchart {IEEE} = See: [g:IEEE:data flow
diagram]. [cite:ieee-std-610-12-1990]

glossary:: data structure-centered design {IEEE} = A software design
technique in which the [g:IEEE:architecture] of a system is derived
from analysis of the structure of the data sets with which the system
must deal. See also [g:IEEE:input-process-output]; [g:IEEE:modular
decomposition]; [g:IEEE:object-oriented design]; [g:IEEE:rapid
prototyping]; [g:IEEE:stepwise refinement]; [g:IEEE:structure clash];
[g:IEEE:structured design]; [g:IEEE:transaction analysis];
[g:IEEE:transform analysis]. [cite:ieee-std-610-12-1990]

glossary:: data structure diagram {IEEE} = A diagram that depicts a
set of data elements, their attributes, and the logical relationships
among them.  Contrast with: [g:IEEE:data flow diagram]. See also
[g:IEEE:entity-relationship diagram]. [cite:ieee-std-610-12-1990]

glossary:: demodularization {IEEE} = In software design, the process
of combining related software modules, usually to optimize system
performance.  See also [g:IEEE:downward compression]; [g:IEEE:lateral
compression]; [g:IEEE:upward compression]. [cite:ieee-std-610-12-1990]

glossary:: design description {IEEE} = A document that describes the
design of a [g:IEEE:system] or [g:IEEE:component]. Typical contents
include [g:IEEE:system] or [g:IEEE:component] [g:IEEE:architecture],
control logic, data structures, input/ output formats, interface
descriptions, and algorithms. Syn: [g:IEEE:design document];
[g:IEEE:design specification]. See also: [g:IEEE:product
specification]. Contrast with: [g:IEEE:requirements
specification]. [cite:ieee-std-610-12-1990]

glossary:: design document {IEEE} = See: [g:IEEE:design
description]. [cite:ieee-std-610-12-1990]

glossary:: design phase {IEEE} = The period of time in the
[g:IEEE:software life cycle] during which the designs for
architecture, software components, interfaces, and data are created,
documented, and verified to satisfy requirements. See also
[g:IEEE:detailed design]; [g:IEEE:preliminary
design]. [cite:ieee-std-610-12-1990]

glossary:: design requirement {IEEE} = A [g:IEEE:requirement] that
specifies or constrains the design of a [g:IEEE:system] or system
[g:IEEE:component]. Contrast with: [g:IEEE:implementation
requirement]; [g:IEEE:interface requirement]; [g:IEEE:performance
requirement]; [g:IEEE:physical
requirement]. [cite:ieee-std-610-12-1990]

glossary:: design specification {IEEE} = See: [g:IEEE:design
description]. [cite:ieee-std-610-12-1990]

glossary:: detailed design {IEEE} = (1) The process of refining and
expanding the [g:IEEE:preliminary design] of a [g:IEEE:system] or
[g:IEEE:component] to the extent that the design is sufficiently
complete to be implemented.  See also [g:IEEE:software development
process].  (2) The result of the process in
(1). [cite:ieee-std-610-12-1990]

glossary:: developer {IEEE} = Organization that performs development
tasks (including requirements analysis, design, testing through
acceptance) during a life cycle process. NOTE: In this International
Standard, the terms developer and implementer are
synonymous. [cite:ieee-std-12207-2008]

glossary:: deviation {IEEE} = (1) A departure from a specified
requirement.  (2) A written authorization, granted prior to the
manufacture of an item, to depart from a particular performance or
design requirement for a specific number of units or a specific period
of time. Note: Unlike an engineering change, a deviation does not
require revision of the documentation defining the affected item. See
also: [g:IEEE:configuration control]. Contrast with:
[g:IEEE:engineering change];
[g:IEEE:waiver]. [cite:ieee-std-610-12-1990]

glossary:: digraph {IEEE} = See: [g:IEEE:directed
graph]. [cite:ieee-std-610-12-1990]

glossary:: direct insert subroutine {IEEE} = See: [g:IEEE:open
subroutine]. [cite:ieee-std-610-12-1990]

glossary:: directed graph {IEEE} = A [g:IEEE:graph] (sense 2) in which
direction is implied in the internode connections. Syn:
[g:IEEE:digraph]. Contrast with: [g:IEEE:undirected
graph]. [cite:ieee-std-610-12-1990]

glossary:: document {IEEE} = (A) A medium, and the information
recorded on it, that generally has permanence and can be read by a
person or a machine. Examples in software engineering include project
plans, specifications, test plans, and user manuals. (B) To create a
document as in (A). [cite:ieee-std-829-2008]

glossary:: documentation {IEEE} = (A) A collection of documents on a
given subject. (B) Any written or pictorial information describing,
defining, specifying, reporting, or certifying activities,
requirements, procedures, or results. (C) The process of generating or
revising a document. (D) The management of documents, including
identification, acquisition, processing, storage, and
dissemination. [cite:ieee-std-829-2008]

glossary:: downward compression {IEEE} = In software design, a form of
[g:IEEE:demodularization] in which a superordinate module is copied
into the body of a subordinate module. Contrast with: [g:IEEE:lateral
compression]; [g:IEEE:upward compression]. [cite:ieee-std-610-12-1990]

######################################################################
# E
######################################################################

glossary:: enabling system {IEEE} = System that supports a
system-of-interest during its life cycle stages but does not
necessarily contribute directly to its function during operation. NOTE
1: For example, when a system-of-interest enters the production stage,
a production-enabling system is required.  NOTE 2: Each enabling
system has a life cycle of its own. This International Standard is
applicable to each enabling system when, in its own right, it is
treated as a system-of-interest. [cite:ieee-std-12207-2008]
[cite:ieee-std-15288-2008]

glossary:: engineering {IEEE} = The application of a systematic,
disciplined, quantifiable approach to structures, machines, products,
systems, or processes. [cite:ieee-std-610-12-1990]

glossary:: engineering change {IEEE} = In [g:IEEE:configuration
management], an alteration in the configuration of a
[g:IEEE:configuration item] or other designated item after formal
establishment of its [g:IEEE:configuration identification]. See also
[g:IEEE:configuration control]; [g:IEEE:engineering change
proposal]. Contrast with: [g:IEEE:deviation];
[g:IEEE:waiver]. [cite:ieee-std-610-12-1990]

glossary:: engineering change proposal {IEEE} = In
[g:IEEE:configuration management], a proposed [g:IEEE:engineering
change] and the documentation by which the change is described and
suggested.  See also [g:IEEE:configuration
control]. [cite:ieee-std-610-12-1990]

glossary:: entity-relationship diagram {IEEE} = A diagram that depicts
a set of real-world entities and the logical relationships among them.
Syn: [g:IEEE:entity-relationship map]. See also [g:IEEE:data structure
diagram]. [cite:ieee-std-610-12-1990]

glossary:: entity-relationship map {IEEE} = See:
[g:IEEE:entity-relationship diagram]. [cite:ieee-std-610-12-1990]

######################################################################
# F
######################################################################

glossary:: facility {IEEE} = Physical means or equipment for
facilitating the performance of an action, e.g. buildings,
instruments, tools. [cite:ieee-std-12207-2008]
[cite:ieee-std-15288-2008]

glossary:: factoring {IEEE} = (1) The process of decomposing a system
into a hierarchy of modules. See also [g:IEEE:modular decomposition].
(2) The process of removing a function from a module and placing it
into a module of its own. [cite:ieee-std-610-12-1990]

glossary:: feature {IEEE} = A distinguishing characteristic of a
system item (includes both functional and nonfunctional attributes
such as performance and reusability). [cite:ieee-std-829-2008]

glossary:: firmware {IEEE} = Combination of a hardware device and
computer instructions or computer data that reside as read-only
software on the hardware device. NOTE: The software cannot be readily
modified under program control. [cite:ieee-std-12207-2008]

glossary:: flow diagram {IEEE} = See:
[g:IEEE:flowchart]. [cite:ieee-std-610-12-1990]

glossary:: flowchart {IEEE} = A [g:IEEE:control flow diagram] in which
suitably annotated geometrical figures are used to represent
operations, data, or equipment, and arrows are used to indicate the
sequential flow from one to another. Syn: [g:IEEE:flow diagram]. See
also [g:IEEE:block diagram]; [g:IEEE:box diagram]; [g:IEEE:bubble
chart]; [g:IEEE:graph]; [g:IEEE:input-process-output chart];
[g:IEEE:structure chart]. [cite:ieee-std-610-12-1990]

glossary:: formal specification {IEEE} = (1) A specification written
and approved in accordance with established standards.  (2) A
specification written in a formal notation, often for use in
[g:IEEE:proof of correctness]. [cite:ieee-std-610-12-1990]

glossary:: functional baseline {IEEE} = In [g:IEEE:configuration
management], the initial approved technical documentation for a
[g:IEEE:configuration item].  Contrast with: [g:IEEE:allocated
baseline]; developmental configuration; [g:IEEE:product
baseline]. [cite:ieee-std-610-12-1990]

glossary:: functional cohesion {IEEE} = A type of [g:IEEE:cohesion] in
which the tasks performed by a software module all contribute to the
performance of a single function. Contrast with: [g:IEEE:coincidental
cohesion]; [g:IEEE:communicational cohesion]; [g:IEEE:logical
cohesion]; [g:IEEE:procedural cohesion]; [g:IEEE:sequential cohesion];
[g:IEEE:temporal cohesion]. [cite:ieee-std-610-12-1990]

glossary:: functional configuration audit {IEEE} = ([acs:IEEE:FCA]) An
audit conducted to verify that the development of a
[g:IEEE:configuration item] has been completed satisfactorily, that
the item has achieved the performance and functional characteristics
specified in the functional or allocated configuration identification,
and that its operational and support documents are complete and
satisfactory. See also [g:IEEE:configuration management];
[g:IEEE:physical configuration audit]. [cite:ieee-std-610-12-1990]

glossary:: functional configuration identification {IEEE} = In
[g:IEEE:configuration management], the current approved technical
documentation for a [g:IEEE:configuration item]. It prescribes all
necessary functional characteristics, the tests required to
demonstrate achievement of specified functional characteristics, the
necessary interface characteristics with associated
[g:IEEE:configuration item]s, the [g:IEEE:configuration item]'s key
functional characteristics and its key lower level
[g:IEEE:configuration item]s, if any, and design constraints. Contrast
with: [g:IEEE:allocated configuration identification]; [g:IEEE:product
configuration identification].  See also [g:IEEE:functional
baseline]. [cite:ieee-std-610-12-1990]

glossary:: functional decomposition {IEEE} = A type of [g:IEEE:modular
decomposition] in which a [g:IEEE:system] is broken down into
[g:IEEE:component]s that correspond to system functions and
subfunctions. See also [g:IEEE:hierarchical decomposition];
[g:IEEE:stepwise refinement]. [cite:ieee-std-610-12-1990]

glossary:: functional specification {IEEE} = A document that specifies
the functions that a [g:IEEE:system] or [g:IEEE:component] must
perform. Often part of a [g:IEEE:requirements
specification]. [cite:ieee-std-610-12-1990]

######################################################################
# G
######################################################################

glossary:: graph {IEEE} = (1) A diagram that represents the variation
of a variable in comparison with that of one or more other variables;
for example, a graph showing a bathtub curve. (2) A diagram or other
representation consisting of a finite set of nodes and internode
connections called edges or arcs. See also [g:IEEE:block diagram];
[g:IEEE:box diagram]; [g:IEEE:bubble chart]; [g:IEEE:directed graph];
[g:IEEE:flowchart]; [g:IEEE:input-process-output chart];
[g:IEEE:structure chart]. [cite:ieee-std-610-12-1990]

######################################################################
# H
######################################################################

glossary:: hierarchical decomposition {IEEE} = A type of
[g:IEEE:modular decomposition] in which a [g:IEEE:system] is broken
down into a hierarchy of [g:IEEE:component]s through a series of
top-down refinements.  See also [g:IEEE:functional decomposition];
[g:IEEE:stepwise refinement]. [cite:ieee-std-610-12-1990]

glossary:: hierarchical input-process-output {IEEE} =
([acs:IEEE:HIPO]). See:
[g:IEEE:input-process-output]. [cite:ieee-std-610-12-1990]

glossary:: hierarchy chart {IEEE} = See: [g:IEEE:structure
chart]. [cite:ieee-std-610-12-1990]

glossary:: hybrid coupling {IEEE} = A type of [g:IEEE:coupling] in
which different subsets of the range of values that a data item can
assume are used for different and unrelated purposes in different
software module. Contrast with: [g:IEEE:common-environment coupling];
[g:IEEE:content coupling]; [g:IEEE:control coupling]; [g:IEEE:data
coupling]; [g:IEEE:pathological coupling]. [cite:ieee-std-610-12-1990]

######################################################################
# I
######################################################################

glossary:: Independent Verification and Validation {IEEE} =
([acs:IEEE:IV&V]) [g:IEEE:verification] and [g:IEEE:validation]
performed by an organization that is technically, managerially, and
financially independent of the development
organization. [cite:ieee-std-610-12-1990]

glossary:: Interface Requirements Specification {IEEE} =
([acs:IEEE:IRS]) Documentation that specifies requirements for
interfaces between or among systems or components. These requirements
include constraints on formats and timing. This may be included as a
part of the Software Requirements
Specification. [cite:ieee-std-829-2008]

###

glossary:: incremental development {IEEE} = A software development
technique in which requirements definition, design, implementation,
and testing occur in an overlapping, iterative (rather than
sequential) manner, resulting in incremental completion of the overall
[g:IEEE:software product]. Contrast with: [g:IEEE:waterfall
model]. See also [g:IEEE:data structure-centered design];
[g:IEEE:input-process-output]; [g:IEEE:modular decomposition];
[g:IEEE:object-oriented design]; [g:IEEE:rapid prototyping];
[g:IEEE:spiral model]; [g:IEEE:stepwise refinement];
[g:IEEE:structured design]; [g:IEEE:transaction analysis];
[g:IEEE:transform analysis]. [cite:ieee-std-610-12-1990]

glossary:: inductive assertion method {IEEE} = A [g:IEEE:proof of
correctness] technique in which [g:IEEE:assertion]s are written
describing program inputs, outputs, and intermediate conditions, a set
of theorems is developed relating satisfaction of the input assertions
to satisfaction of the output assertions, and the theorems are proved
or disproved using proof by induction. [cite:ieee-std-610-12-1990]

glossary:: inline code {IEEE} = A sequence of computer instructions
that is physically contiguous with the instructions that logically
precede and follow it. [cite:ieee-std-610-12-1990]

glossary:: input-output coupling {IEEE} = See: [g:IEEE:data
coupling]. [cite:ieee-std-610-12-1990]

glossary:: input-process-output {IEEE} = A software design technique
that consists of identifying the steps involved in each process to be
performed and identifying the inputs to and outputs from each
step. Note: A refinement called [g:IEEE:hierarchical
input-process-output] identifies the steps, inputs, and outputs at
both general and detailed levels of detail. See also [g:IEEE:data
structure-centered design]; [g:IEEE:input-process-output chart];
[g:IEEE:modular decomposition]; [g:IEEE:object-oriented design];
[g:IEEE:rapid prototyping]; [g:IEEE:stepwise refinement];
[g:IEEE:structured design]; [g:IEEE:transaction analysis];
[g:IEEE:transform analysis]. [cite:ieee-std-610-12-1990]

glossary:: input-process-output chart {IEEE} = A diagram of a software
system or module, consisting of a rectangle on the left listing
inputs, a rectangle in the center listing processing steps, a
rectangle on the right listing outputs, and arrows connecting inputs
to processing steps and processing steps to outputs. See also
[g:IEEE:block diagram]; [g:IEEE:box diagram]; [g:IEEE:bubble chart];
[g:IEEE:flowchart]; [g:IEEE:graph]; [g:IEEE:structure
chart]. [cite:ieee-std-610-12-1990]

glossary:: integration testing {IEEE} = Testing in which software
components, hardware components, or both are combined and tested to
evaluate the interaction among them. This term is commonly used for
both the integration of components and the integration of entire
systems. [cite:ieee-std-829-2008]

glossary:: integrity level {IEEE} = (A) The degree to which software
complies or must comply with a set of stakeholder-selected software
and/or software-based system characteristics (e.g., software
complexity, risk assessment, safety level, security level, desired
performance, reliability, or cost), defined to reflect the importance
of the software to its stakeholders. (B) A symbolic value representing
this degree of compliance within an integrity level
scheme. [cite:ieee-std-829-2008]

glossary:: integrity level scheme {IEEE} = A set of system
characteristics (such as complexity, risk, safety level, security
level, desired performance, reliability, and/or cost) selected as
important to stakeholders, and arranged into discrete levels of
performance or compliance (integrity levels), to help define the level
of quality control to be applied in developing and/or delivering the
software. [cite:ieee-std-829-2008]

glossary:: interface control {IEEE} = In [g:IEEE:configuration
management], the process of: (a) identifying all functional and
physical characteristics relevant to the interfacing of two or more
[g:IEEE:configuration item]s provided by one or more organizations,
and (b) ensuring that proposed changes to these characteristics are
evaluated and approved prior to implementation.  (2) (DOD usage) In
[g:IEEE:configuration management], the administrative and technical
procedures and documentation necessary to identify functional and
physical characteristics between and within [g:IEEE:configuration
item]s provided by different developers, and to resolve problems
concerning the specified interfaces. See also [g:IEEE:configuration
control]. [cite:ieee-std-610-12-1990]

glossary:: interface requirement {IEEE} = A [g:IEEE:requirement] that
specifies an external item with which a [g:IEEE:system] or system
[g:IEEE:component] must interact, or that sets forth constraints on
formats, timing, or other factors caused by such an
interaction. Contrast with: [g:IEEE:design requirement];
[g:IEEE:implementation requirement]; [g:IEEE:performance requirement];
[g:IEEE:physical requirement]. [cite:ieee-std-610-12-1990]

glossary:: invariant {IEEE} = An [g:IEEE:assertion] that should always
be true for a specified segment or at a specified point of a computer
program. [cite:ieee-std-610-12-1990]

glossary:: implementation phase {IEEE} = The period of time in the
[g:IEEE:software life cycle] during which a [g:IEEE:software product]
is created from design documentation and
debugged. [cite:ieee-std-610-12-1990]

glossary:: implementation requirement {IEEE} = A [g:IEEE:requirement]
that specifies or constrains the coding or construction of a
[g:IEEE:system] or system [g:IEEE:component].  Contrast with:
[g:IEEE:design requirement]; [g:IEEE:interface requirement];
[g:IEEE:performance requirement]; [g:IEEE:physical
requirement]. [cite:ieee-std-610-12-1990]

glossary:: implementer {IEEE} = Organization that performs
implementation tasks. NOTE: In this International Standard, the terms
developer and implementer are synonymous. [cite:ieee-std-12207-2008]

glossary:: installation and checkout phase {IEEE} = The period of time
in the [g:IEEE:software life cycle] during which a [g:IEEE:software
product] is integrated into its operational environment and tested in
this environment to ensure that it performs as
required. [cite:ieee-std-610-12-1990]

glossary:: item {IEEE} = Source code, object code, control code,
control data, or a collection of these items. NOTE A: software item
can be viewed as a system element of ISO/IEC 15288:2008.  Same as:
[g:IEEE:software item] [cite:ieee-std-12207-2008]

######################################################################
# L
######################################################################

glossary:: lateral compression {IEEE} = In software design, a form of
[g:IEEE:demodularization] in which two or more modules that execute
one after the other are combined into a single module. Contrast with:
[g:IEEE:downward compression]; [g:IEEE:upward
compression]. [cite:ieee-std-610-12-1990]

glossary:: life cycle {IEEE} = Evolution of a system, product,
service, project or other human-made entity from conception through
retirement. [cite:ieee-std-12207-2008] See also [g:IEEE:software life
cycle]; [g:IEEE:system life cycle]. [cite:ieee-std-610-12-1990]
[cite:ieee-std-15288-2008]

glossary:: life cycle model {IEEE} = Framework of processes and
activities concerned with the life cycle that may be organized into
stages, which also acts as a common reference for communication and
understanding. [cite:ieee-std-12207-2008] [cite:ieee-std-15288-2008]

glossary:: life cycle processes {IEEE} = A set of interrelated
activities that result in the development or assessment of software
products. Each activity consists of tasks. The life cycle processes
may overlap one another. [cite:ieee-std-829-2008]

glossary:: logical cohesion {IEEE} = A type of cohesion in which the
tasks performed by a software module perform logically similar
functions; for example, processing of different types of input
data. Contrast with: [g:IEEE:coincidental cohesion];
[g:IEEE:communicational cohesion]; [g:IEEE:functional cohesion];
[g:IEEE:procedural cohesion]; [g:IEEE:sequential cohesion];
[g:IEEE:temporal cohesion]. [cite:ieee-std-610-12-1990]

######################################################################
# M
######################################################################

glossary:: macro {IEEE} = In [g:IEEE:software engineering] a
predefined sequence of computer instructions that is inserted into a
program, usually during assembly or compilation, at each place that
its corresponding macroinstruction appears in the program. Syn:
[g:IEEE:macro definition]. See also [g:IEEE:macroinstruction];
[g:IEEE:macrogenerator]; [g:IEEE:open
subroutine]. [cite:ieee-std-610-12-1990]

glossary:: macro definition {IEEE} = See:
[g:IEEE:macro]. [cite:ieee-std-610-12-1990]

glossary:: macro generating program {IEEE} = See:
[g:IEEE:macrogenerator]. [cite:ieee-std-610-12-1990]

glossary:: macrogenerator {IEEE} = A [g:IEEE:routine], often part of
an assembler or compiler, that replaces each [g:IEEE:macroinstruction]
in a source program with the predefined sequence of instructions that
the [g:IEEE:macroinstruction] represents. Syn: [g:IEEE:macro
generating program]. [cite:ieee-std-610-12-1990]

glossary:: macroinstruction {IEEE} = A source code instruction that is
replaced by a predefined sequence of source instructions, usually in
the same language as the rest of the program and usually during
assembly or compilation.  See also [g:IEEE:macro];
[g:IEEE:macrogenerator]. [cite:ieee-std-610-12-1990]

glossary:: main program {IEEE} = A software component that is called
by the operating system of a computer and that usually calls other
software [g:IEEE:component]s. See also [g:IEEE:routine];
[g:IEEE:subprogram]. [cite:ieee-std-610-12-1990]

glossary:: maintainer {IEEE} = Organization that performs maintenance
activities. [cite:ieee-std-12207-2008]

glossary:: minimum tasks {IEEE} = Those tasks required for the
integrity level assigned to the software to be
tested. [cite:ieee-std-829-2008]

glossary:: modular decomposition {IEEE} = The process of breaking a
system into [g:IEEE:component]s to facilitate design and development;
an element of modular programming. Syn: [g:IEEE:modularization].  See
also [g:IEEE:cohesion]; [g:IEEE:coupling]; [g:IEEE:demodularization];
[g:IEEE:factoring]; [g:IEEE:functional decomposition];
[g:IEEE:hierarchical decomposition];
[g:IEEE:packaging]. [cite:ieee-std-610-12-1990]

glossary:: modularization {IEEE} = See: [g:IEEE:modular
decomposition]. [cite:ieee-std-610-12-1990]

glossary:: module {IEEE} = (1) A program [g:IEEE:unit] that is
discrete and identifiable with respect to compiling, combining with
other [g:IEEE:unit]s, and loading; for example, the input to, or
output from, an assembler, compiler, linkage editor, or executive
routine.  (2) A logically separable part of a program.  Note: The
terms [g:IEEE:module], [g:IEEE:component], and [g:IEEE:unit] are often
used interchangeably or defined to be sub-elements of one another in
different ways depending upon the context. The relationship of these
terms is not yet standardized. [cite:ieee-std-610-12-1990]

glossary:: module strength {IEEE} = See:
[g:IEEE:cohesion]. [cite:ieee-std-610-12-1990]

######################################################################
# N
######################################################################

glossary:: Nassi-Shneiderman chart {IEEE} = See: [g:IEEE:box
diagram]. [cite:ieee-std-610-12-1990]

###

glossary:: non-deliverable item {IEEE} = Hardware or software product
that is not required to be delivered under the contract but may be
employed in the development of a software
product. [cite:ieee-std-12207-2008]

glossary:: notice of revision {IEEE} = A form used in
[g:IEEE:configuration management] to propose revisions to a drawing or
list, and, after approval, to notify users that the drawing or list
has been, or will be, revised accordingly.  See also
[g:IEEE:configuration control]; [g:IEEE:engineering change];
[g:IEEE:specification change notice]. [cite:ieee-std-610-12-1990]

######################################################################
# O
######################################################################

glossary:: object-oriented design {IEEE} = A software development
technique in which a [g:IEEE:system] or [g:IEEE:component] is
expressed in terms of objects and connections between those
objects. See also [g:IEEE:data structure-centered design];
[g:IEEE:input-process-output]; [g:IEEE:modular decomposition];
[g:IEEE:rapid prototyping]; [g:IEEE:stepwise refinement];
[g:IEEE:structured design]; [g:IEEE:transaction analysis];
[g:IEEE:transform analysis]. [cite:ieee-std-610-12-1990]

glossary:: off-the-shelf {IEEE} = [g:IEEE:product] already developed
and available. [cite:ieee-std-12207-2008]

glossary:: open subroutine {IEEE} = A [g:IEEE:subroutine] that is
copied into a computer program at each place that it is called. Syn:
[g:IEEE:direct insert subroutine].  Contrast with: [g:IEEE:closed
subroutine]. See also [g:IEEE:inline code];
[g:IEEE:macro]. [cite:ieee-std-610-12-1990]

glossary:: operational {IEEE} = (A) Pertaining to a system or
component that is ready for use in its intended environment. (B)
Pertaining to a system or component that is installed in its intended
environment. (C) Pertaining to the environment in which a system or
component is intended to be used. [cite:ieee-std-829-2008]

glossary:: operational testing {IEEE} = Testing conducted to evaluate
a system or component in its operational
environment. [cite:ieee-std-829-2008]

glossary:: operator {IEEE} = Entity that performs the operation of a
system. NOTE 1: The role of operator and the role of user may be
vested, simultaneously or sequentially, in the same individual or
organization.  NOTE 2: In the context of this specific definition, the
term entity means an individual or an
organization. [cite:ieee-std-12207-2008] [cite:ieee-std-15288-2008]

glossary:: optional tasks {IEEE} = Those tasks that may be added to
the minimum testing tasks to address specific
requirements. [cite:ieee-std-829-2008] See also [g:IEEE:minimum tasks]

glossary:: order clash {IEEE} = In software design, a type of
[g:IEEE:structure clash] in which a program must deal with two or more
data sets that have been sorted in different orders. See also
[g:IEEE:data structure-centered design]. [cite:ieee-std-610-12-1990]

glossary:: organization {IEEE} = Person or a group of people and
facilities with an arrangement of responsibilities, authorities and
relationships.  NOTE 1: Adapted from ISO 9000:2005.  NOTE 2: A body of
persons organized for some specific purpose, such as a club, union,
corporation, or society is an organization.  NOTE 3: An identified
part of an organization (even as small as a single individual) or an
identified group of organizations can be regarded as an organization
if it has responsibilities, authorities and relationships.  NOTE 4: A
form of an organizational entity is often called an enterprise, so the
organizational aspects of this International Standard would apply to
an enterprise as well. [cite:ieee-std-12207-2008]
[cite:ieee-std-15288-2008]

######################################################################
# P
######################################################################

glossary:: Preliminary Design Review {IEEE} = ([acs:IEEE:PDR]) (1) A
review conducted to evaluate the progress, technical adequacy, and
risk resolution of the selected design approach for one or more
[g:IEEE:configuration item]s; to determine each design's compatibility
with the requirements for the [g:IEEE:configuration item]; to evaluate
the degree of definition and assess the technical risk associated with
the selected manufacturing methods and processes; to establish the
existence and compatibility of the physical and functional interfaces
among the [g:IEEE:configuration item]s and other items of equipment,
facilities, software and personnel; and, as applicable, to evaluate
the preliminary operational and support documents. See also
[g:IEEE:Critical Design Review]; [g:IEEE:system design review].  (2) A
review as in (1) of any hardware or software
[g:IEEE:component]. [cite:ieee-std-610-12-1990]

###

glossary:: packaging {IEEE} = In software development, the assignment
of modules to segments to be handled as distinct physical units for
execution by a computer. [cite:ieee-std-610-12-1990]

glossary:: partial correctness {IEEE} = In [g:IEEE:proof of
correctness], a designation indicating that a program's output
[g:IEEE:assertion]s follow logically from its input
[g:IEEE:assertion]s and processing steps.  Contrast with:
[g:IEEE:total correctness]. [cite:ieee-std-610-12-1990]

glossary:: party {IEEE} = [g:IEEE:organization] entering into a
contract. NOTE: In this International Standard, the agreeing parties
are called the [g:IEEE:acquirer] and the
[g:IEEE:supplier]. [cite:ieee-std-12207-2008]
[cite:ieee-std-15288-2008]

glossary:: patch {IEEE} = (1) A modification made directly to an
object program without reassembling or recompiling from the source
program.  (2) A modification made to a source program as a last-minute
fix or afterthought.  (3) Any modification to a source or object
program.  (4) To perform a modification as in (1), (2), or
(3). [cite:ieee-std-610-12-1990]

glossary:: pathological coupling {IEEE} = A type of [g:IEEE:coupling]
in which one software module affects or depends upon the internal
implementation of another. Contrast with: [g:IEEE:common-environment
coupling]; [g:IEEE:content coupling]; [g:IEEE:control coupling];
[g:IEEE:data coupling]; [g:IEEE:hybrid
coupling]. [cite:ieee-std-610-12-1990]

glossary:: performance requirement {IEEE} = A [g:IEEE:requirement]
that imposes conditions on a functional requirement; for example a
[g:IEEE:requirement] that specifies the speed, accuracy, or memory
usage with which a given function must be performed. Contrast with:
[g:IEEE:design requirement]; [g:IEEE:implementation requirement];
[g:IEEE:interface requirement]; [g:IEEE:physical
requirement]. [cite:ieee-std-610-12-1990]

glossary:: performance specification {IEEE} = A document that
specifies the performance characteristics that a [g:IEEE:system] or
[g:IEEE:component] must possess.  These characteristics typically
include speed, accuracy, and memory usage. Often part of a
[g:IEEE:requirements specification]. [cite:ieee-std-610-12-1990]

glossary:: physical configuration audit {IEEE} = ([acs:IEEE:PCA]) An
[g:IEEE:audit] conducted to verify that a [g:IEEE:configuration item],
as built, conforms to the technical documentation that defines it. See
also [g:IEEE:functional configuration
audit]. [cite:ieee-std-610-12-1990]

glossary:: physical requirement {IEEE} = A [g:IEEE:requirement] that
specifies a physical characteristic that a system or system component
must possess; for example, material, shape, size, weight.  Contrast
with: [g:IEEE:design requirement]; [g:IEEE:implementation
requirement]; [g:IEEE:interface requirement]; [g:IEEE:performance
requirement]. [cite:ieee-std-610-12-1990]

glossary:: preliminary design {IEEE} = (1) The process of analyzing
design alternatives and defining the architecture, components,
interfaces, and timing and sizing estimates for a [g:IEEE:system] or
[g:IEEE:component]. See also [g:IEEE:detailed design].  (2) The result
of the process in (1). [cite:ieee-std-610-12-1990]

glossary:: procedural cohesion {IEEE} = A type of [g:IEEE:cohesion] in
which the tasks performed by a software module all contribute to a
given program procedure, such as an iteration or decision
process. Contrast with: [g:IEEE:coincidental cohesion];
[g:IEEE:communicational cohesion]; [g:IEEE:functional cohesion];
[g:IEEE:logical cohesion]; [g:IEEE:sequential cohesion];
[g:IEEE:temporal cohesion]. [cite:ieee-std-610-12-1990]

glossary:: process {IEEE} = Set of interrelated or interacting
activities which transforms inputs into
outputs. [cite:ieee-std-12207-2008] [cite:ieee-std-15288-2008]
[cite:ieee-std-829-2008]

glossary:: process outcome {IEEE} = Observable result of the
successful achievement of the process purpose. NOTE: An outcome
statement describes one of the following: (a) production of an
artifact; (b) a significant change in state; (c) meeting of specified
constraints, e.g., requirements, goals,
etc. [cite:ieee-std-12207-2008] [cite:ieee-std-15288-2008]

glossary:: process purpose {IEEE} = High level objective of performing
the process and the likely outcomes of effective implementation of the
process. NOTE: The implementation of the process should provide
tangible benefits to the stakeholders. [cite:ieee-std-12207-2008]
[cite:ieee-std-15288-2008]

glossary:: product {IEEE} = Result of a
process. [cite:ieee-std-12207-2008] [cite:ieee-std-15288-2008]

glossary:: product baseline {IEEE} = In configuration management, the
initial approved technical documentation (including, for software, the
source code listing) defining a [g:IEEE:configuration item] during the
production, operation, maintenance, and logistic support of its life
cycle. Contrast with: [g:IEEE:allocated baseline]; [g:IEEE:functional
baseline]. See also [g:IEEE:product configuration
identification]. [cite:ieee-std-610-12-1990]

glossary:: product configuration identification {IEEE} = The current
approved or conditionally approved technical documentation defining a
[g:IEEE:configuration item] during the production, operation,
maintenance, and logistic support phases of its [g:IEEE:life
cycle]. It prescribes all necessary physical or form, fit and function
characteristics of a [g:IEEE:configuration item], the selected
functional characteristics designated for production acceptance
testing, and the production acceptance tests. Contrast with:
[g:IEEE:allocated configuration identification]; [g:IEEE:functional
configuration identification].  See also: [g:IEEE:product
baseline]. [cite:ieee-std-610-12-1990]

glossary:: product specification {IEEE} = (1) A document that
specifies the design that production copies of a system or component
must implement.  Note: For software, this document describes the
as-built version of the software. See also [g:IEEE:design
description].  (2) A document that describes the characteristics of a
planned or existing product for consideration by potential customers
or users. [cite:ieee-std-610-12-1990]

glossary:: program structure chart {IEEE} = See: [g:IEEE:program
structure diagram]

glossary:: program structure diagram {IEEE} = See: [g:IEEE:structure
chart]. [cite:ieee-std-610-12-1990]

glossary:: project {IEEE} = Endeavor with defined start and finish
dates undertaken to create a product or service in accordance with
specified resources and requirements. NOTE: 1 Adapted from ISO
9000:2005. NOTE 2: A project may be viewed as a unique process
comprising coordinated and controlled activities and may be composed
of activities from the Project Processes and Technical Processes
defined in this International Standard. [cite:ieee-std-12207-2008]
[cite:ieee-std-15288-2008]

glossary:: project portfolio {IEEE} = Collection of [g:IEEE:project]s
that addresses the strategic objectives of the
organization. [cite:ieee-std-12207-2008] [cite:ieee-std-15288-2008]

glossary:: proof of correctness {IEEE} = (1) A formal technique used
to prove mathematically that a computer program satisfies its
specified requirements. See also [g:IEEE:assertion]; [g:IEEE:formal
specification]; [g:IEEE:inductive assertion method]; [g:IEEE:partial
correctness]; [g:IEEE:total correctness].  (2) A proof that results
from applying the technique in (1). [cite:ieee-std-610-12-1990]

glossary:: prototyping {IEEE} = A hardware and software development
technique in which a preliminary version of part or all of the
hardware or software is developed to permit user feedback, determine
feasibility, or investigate timing or other issues in support of the
development process. See also [g:IEEE:rapid
prototyping]. [cite:ieee-std-610-12-1990]

######################################################################
# Q
######################################################################

glossary:: qualification requirement {IEEE} = Set of criteria or
conditions that have to be met in order to qualify a software product
as complying with its specifications and being ready for use in its
target environment or integration with its containing
system. [cite:ieee-std-12207-2008]

glossary:: qualification testing {IEEE} = (1) Testing, conducted by
the developer and witnessed by the acquirer (as appropriate), to
demonstrate that a software product meets its specifications and is
ready for use in its target environment or integration with its
containing system. [cite:ieee-std-12207-2008] (2) Conducted to
determine whether a system or component is suitable for operational
use. See also [g:IEEE:acceptance testing]; [g:IEEE:operational
testing]. [cite:ieee-std-829-2008]

glossary:: quality {IEEE} = (A) The degree to which a system,
component, or process meets specified requirements. (B) The degree to
which a system, component, or process meets customer or user needs or
expectations. [cite:ieee-std-829-2008]

glossary:: quality assurance {IEEE} = Part of quality management
focused on providing confidence that quality requirements will be
fulfilled. [cite:ieee-std-15288-2008]

######################################################################
# R
######################################################################

glossary:: rapid prototyping {IEEE} = A type of [g:IEEE:prototyping]
in which emphasis is placed on developing prototypes early in the
development process to permit early feedback and analysis in support
of the development process. Contrast with: [g:IEEE:waterfall
model]. See also: [g:IEEE:data structure-centered design];
[g:IEEE:incremental development]; [g:IEEE:input-process-output];
[g:IEEE:modular decomposition]; [g:IEEE:object-oriented design];
[g:IEEE:spiral model]; [g:IEEE:stepwise refinement];
[g:IEEE:structured design]; [g:IEEE:transaction analysis];
[g:IEEE:transform analysis]. [cite:ieee-std-610-12-1990]

glossary:: request for proposal {IEEE} = ([acs:IEEE:RFP]) Document
used by the [g:IEEE:acquirer] as the means to announce its intention
to potential bidders to acquire a specified system, software product
or software service. Same as: [g:IEEE:request for
tender]. [cite:ieee-std-12207-2008] [cite:ieee-std-15288-2008]

glossary:: request for tender {IEEE} = Same as: [g:IEEE:request for
proposal].  [cite:ieee-std-12207-2008] [cite:ieee-std-15288-2008]

glossary:: required inputs {IEEE} = The set of items necessary to
perform the minimum testing tasks mandated within any life cycle
activity. [cite:ieee-std-829-2008]

glossary:: required outputs {IEEE} = The set of items produced as a
result of performing the minimum testing tasks mandated within any
life cycle activity. [cite:ieee-std-829-2008]

glossary:: requirement {IEEE} = (1) A condition or capability needed
by a user to solve a problem or achieve an objective.  (2) A condition
or capability that must be met or possessed by a system or system
component to satisfy a contract, standard, specification, or other
formally imposed documents.  (3) A documented representation of a
condition or capability as in (1) or (2).  See also [g:IEEE:design
requirement]; [g:IEEE:implementation requirement]; [g:IEEE:interface
requirement]; [g:IEEE:performance requirement]; [g:IEEE:physical
requirement]. [cite:ieee-std-610-12-1990]

glossary:: requirements phase {IEEE} = The period of time in the
[g:IEEE:software life cycle] during which the [g:IEEE:requirement]s
for a [g:IEEE:software product] are defined and
documented. [cite:ieee-std-610-12-1990]

glossary:: requirements specification {IEEE} = A document that
specifies the requirements for a [g:IEEE:system] or
[g:IEEE:component]. Typically included are functional requirements,
[g:IEEE:performance requirement]s, [g:IEEE:interface requirement]s,
[g:IEEE:design requirement]s, and development standards.  Contrast
with: [g:IEEE:design description]. See also [g:IEEE:functional
specification]; [g:IEEE:performance
specification]. [cite:ieee-std-610-12-1990]

glossary:: resource {IEEE} = Asset that is utilized or consumed during
the execution of a process. NOTE 1: Resources may include diverse
entities such as funding, personnel, facilities, capital equipment,
tools, and utilities such as power, water, fuel and communication
infrastructures.  NOTE 2: Resources may be reusable, renewable or
consumable. [cite:ieee-std-12207-2008] [cite:ieee-std-15288-2008]

glossary:: retirement {IEEE} = Withdrawal of active support by the
operation and maintenance organization, partial or total replacement
by a new system, or installation of an upgraded
system. [cite:ieee-std-12207-2008] [cite:ieee-std-15288-2008]

glossary:: reusable product {IEEE} = A product developed for one use
but having other uses, or one developed specifically to be usable on
multiple projects or in multiple roles on one project. Examples
include, but are not limited to, commercial off-the-shelf (COTS)
products, acquirer-furnished products, products in reuse libraries,
and preexisting developer products. Each use may include all or part
of the product and may involve its modification. This term can be
applied to any software or system product (for example, requirements
or architectures), not just to software or system
itself. [cite:ieee-std-829-2008]

glossary:: risk {IEEE} = (A) The combination of the probability of
occurrence and the consequences of a given future undesirable
event. Risk can be associated with software and/or systems. (B) The
combination of the probability of an abnormal event or failure and the
consequence(s) of that event or failure to a system's components,
operators, users, or environment. [cite:ieee-std-829-2008]

glossary:: routine {IEEE} = A subprogram that is called by other
programs and subprograms. Note: The terms ``routine,'' ``subprogram,''
and ``subroutine'' are defined and used differently in different
programming languages; the preceding definition is advanced as a
proposed standard. See also [g:IEEE:coroutine];
[g:IEEE:subroutine]. [cite:ieee-std-610-12-1990]

######################################################################
# S
######################################################################

glossary:: Software Configuration Management {IEEE} = ([acs:IEEE:SCM])
See [g:IEEE:configuration management]. [cite:ieee-std-610-12-1990]

glossary:: Software Requirements Specification {IEEE} =
([acs:IEEE:SRS]) Documentation of the essential requirements
(functions, performance, design constraints, and attributes) of the
software and its external interfaces. [cite:ieee-std-829-2008]

glossary:: System Requirements Review {IEEE} = ([acs:IEEE:SRR]) A
review conducted to evaluate the completeness and adequacy of the
[g:IEEE:requirement]s defined for a [g:IEEE:system]; to evaluate the
system engineering process that produced those [g:IEEE:requirement]s;
to assess the results of system engineering studies; and to evaluate
system engineering plans. See also [g:IEEE:software requirements
review]. [cite:ieee-std-610-12-1990]

###

glossary:: scenario {IEEE} = (A) A description of a series of events
that may occur concurrently or sequentially. (B) An account or
synopsis of a projected course of events or actions. (adopted from
IEEE Std 1362-1998 (B20)) (C) Commonly used for groups of test cases;
synonyms are script, set, or suite. [cite:ieee-std-829-2008]

glossary:: security {IEEE} = (1) Protection of information and data so
that unauthorized persons or systems cannot read or modify them and
authorized persons or systems are not denied access to
them. [cite:ieee-std-12207-2008], (2) All aspects related to defining,
achieving, and maintaining confidentiality, integrity, availability,
non-repudiation, accountability, authenticity, and reliability of a
system. [cite:ieee-std-15288-2008]

glossary:: sequential cohesion {IEEE} = A type of [g:IEEE:cohesion] in
which the output of one task performed by a software module serves as
input to another task performed by the module. Contrast with:
[g:IEEE:coincidental cohesion]; [g:IEEE:communicational cohesion];
[g:IEEE:functional cohesion]; [g:IEEE:logical cohesion];
[g:IEEE:procedural cohesion]; [g:IEEE:temporal
cohesion]. [cite:ieee-std-610-12-1990]

glossary:: service {IEEE} = Performance of activities, work, or duties
associated with a product. [cite:ieee-std-12207-2008]

glossary:: software {IEEE} = Computer programs, procedures, and
possibly associated documentation and data pertaining to the operation
of a computer system. [cite:ieee-std-829-2008]

glossary:: software design description {IEEE} = ([acs:IEEE:SDD]) A
representation of software created to facilitate analysis, planning,
implementation, and decision making. The software design description
is used as a medium for communicating software design information, and
it may be thought of as a blueprint or model of the
system. [cite:ieee-std-829-2008]

glossary:: software development cycle {IEEE} = The period of time that
begins with the decision to develop a software product and ends when
the software is delivered. This cycle typically includes a
[g:IEEE:requirements phase], [g:IEEE:design phase],
[g:IEEE:implementation phase], [g:IEEE:test phase], and sometimes,
[g:IEEE:installation and checkout phase].  Contrast with:
[g:IEEE:software life cycle].  Notes: (1) The phases listed above may
overlap or be performed iteratively, depending upon the software
development approach used.  (2) This term is sometimes used to mean a
longer period of time, either the period that ends when the software
is no longer being enhanced by the developer, or the entire
[g:IEEE:software life cycle]. [cite:ieee-std-610-12-1990]

glossary:: software development process {IEEE} = The process by which
user needs are translated into a [g:IEEE:software product]. The
process involves translating user needs into software
[g:IEEE:requirement]s, transforming the software [g:IEEE:requirement]s
into design, implementing the design in code, testing the code, and
sometimes, installing and checking out the software for operational
use. Note: These activities may overlap or be performed iteratively.
See also [g:IEEE:incremental development]; [g:IEEE:rapid prototyping];
[g:IEEE:spiral model]; [g:IEEE:waterfall
model]. [cite:ieee-std-610-12-1990]

glossary:: software engineering {IEEE} = (1) The application of a
systematic, disciplined, quantifiable approach to the development,
operation, and maintenance of software; that is, the application of
engineering to software.  (2) The study of approaches as in
(1). [cite:ieee-std-610-12-1990] See also the CMMI definition of
[g:CMMI:software engineering]

glossary:: software item {IEEE} = Source code, object code, control
code, control data, or a collection of these items. NOTE: A software
item can be viewed as a system element of ISO/IEC
15288:2008. [cite:ieee-std-12207-2008]

glossary:: software life cycle {IEEE} = The period of time that begins
when a software product is conceived and ends when the software is no
longer available for use. The software life cycle typically includes a
concept phase, requirements phase, design phase, implementation phase,
test phase, installation and checkout phase, operation and maintenance
phase, and, sometimes, retirement phase. Note: These phases may
overlap or be performed iteratively. Contrast with: [g:IEEE:software
development cycle]. [cite:ieee-std-610-12-1990]

glossary:: software product {IEEE} = (1) The complete set of computer
programs, procedures, and possibly associated documentation and data
designated for delivery to a user.  (2) Any of the individual items in
(1). [cite:ieee-std-610-12-1990] (3) Set of computer programs,
procedures, and possibly associated documentation and
data. [cite:ieee-std-12207-2008]

glossary:: software requirements review {IEEE} = ([acs:IEEE-2:SRR])
(1) A review of the [g:IEEE:requirement]s specified for one or more
software [g:IEEE:configuration item]s to evaluate their responsiveness
to and interpretation of the system requirements and to determine
whether they form a satisfactory basis for proceeding into
[g:IEEE:preliminary design] of the [g:IEEE:configuration item]s. See
also [g:IEEE:System Requirements Review]. Note: This review is called
software specification review by the US. Department of Defense.  (2) A
review as in (1) for any software
[g:IEEE:component]. [cite:ieee-std-610-12-1990]

glossary:: software unit {IEEE} = Separately compilable piece of
code. [cite:ieee-std-12207-2008]

glossary:: software-based systems {IEEE} = Computer systems that are
controlled by software. [cite:ieee-std-829-2008]

glossary:: specification change notice {IEEE} = ([acs:IEEE:SCN]) A
document used in [g:IEEE:configuration management] to propose,
transmit, and record changes to a specification. See also
[g:IEEE:configuration control]; [g:IEEE:engineering change];
[g:IEEE:notice of revision]. [cite:ieee-std-610-12-1990]

glossary:: spiral model {IEEE} = A model of the [g:IEEE:software
development process] in which the constituent activities, typically
requirements analysis, preliminary and detailed design, coding,
integration, and testing, are performed iteratively until the software
is complete.  Contrast with: [g:IEEE:waterfall model]. See also
[g:IEEE:incremental development]; [g:IEEE:rapid
prototyping]. [cite:ieee-std-610-12-1990]

glossary:: stage {IEEE} = Period within the life cycle of an entity
that relates to the state of its description or realization. NOTE 1:
As used in this International Standard, stages relate to major
progress and achievement milestones of the entity through its life
cycle.  NOTE 2: Stages may be overlapping. [cite:ieee-std-12207-2008]
[cite:ieee-std-15288-2008]

glossary:: state diagram {IEEE} = A diagram that depicts the states
that a [g:IEEE:system] or [g:IEEE:component] can assume, and shows the
events or circumstances that cause or result from a change from one
state to another. [cite:ieee-std-610-12-1990]

glossary:: statement of work {IEEE} = ([acs:IEEE:SOW]) Document used
by the [g:IEEE:acquirer] as the means to describe and specify the
tasks to be performed under the contract. [cite:ieee-std-12207-2008]

glossary:: stepwise refinement {IEEE} = A software development
technique in which data and processing steps are defined broadly at
first and then further defined with increasing detail. See also
[g:IEEE:data structure-centered design];
[g:IEEE:input-process-output]; [g:IEEE:modular decomposition];
[g:IEEE:object-oriented design]; [g:IEEE:rapid prototyping];
[g:IEEE:structured design]; [g:IEEE:transaction analysis];
[g:IEEE:transform analysis]. [cite:ieee-std-610-12-1990]

glossary:: structure chart {IEEE} = A diagram that identifies modules,
activities, or other entities in a system or computer program and
shows how larger or more general entities break down into smaller,
more specific entities. Note: The result is not necessarily the same
as that shown in a [g:IEEE:call graph]. Syn: [g:IEEE:hierarchy chart];
[g:IEEE:program structure chart]. Contrast with: [g:IEEE:call
graph]. [cite:ieee-std-610-12-1990]

glossary:: structure clash {IEEE} = In software design, a situation in
which a module must deal with two or more data sets that have
incompatible data structures. See also [g:IEEE:data structure-centered
design]; [g:IEEE:order clash]. [cite:ieee-std-610-12-1990]

glossary:: structured design {IEEE} = (1) Any disciplined approach to
software design that adheres to specified rules based on principles
such as modularity, top-down design, and stepwise refinement of data,
system structures, and processing steps. See also [g:IEEE:data
structure-centered design]; [g:IEEE:input-process-output];
[g:IEEE:modular decomposition]; [g:IEEE:object-oriented design];
[g:IEEE:rapid prototyping]; [g:IEEE:stepwise refinement];
[g:IEEE:transaction analysis]; [g:IEEE:transform analysis].  (2) The
result of applying the approach in (1). [cite:ieee-std-610-12-1990]

glossary:: subprogram {IEEE} = A separately compilable, executable
component of a computer program.  Note: The terms ``routine,''
``subprogram,'' and ``subroutine'' are defined and used differently in
different programming languages; the preceding definition is advanced
as a proposed standard. See also [g:IEEE:coroutine]; [g:IEEE:main
program]; [g:IEEE:routine];
[g:IEEE:subroutine]. [cite:ieee-std-610-12-1990]

glossary:: subroutine {IEEE} = A routine that returns control to the
program or subprogram that called it.  Note: The terms ``routine,''
``subprogram,'' and ``subroutine'' are defined and used differently in
different programming languages; the preceding definition is advanced
as a proposed standard. Contrast with: [g:IEEE:coroutine]. See also
[g:IEEE:closed subroutine]; [g:IEEE:open
subroutine]. [cite:ieee-std-610-12-1990]

glossary:: supplier {IEEE} = Organization or individual that enters
into an agreement with the acquirer for the supply of a product or
service.  NOTE 1: The ``supplier'' could be a contractor, producer,
seller, or vendor.  NOTE 2: Sometimes the acquirer and the supplier
are part of the same organization. [cite:ieee-std-12207-2008]
[cite:ieee-std-15288-2008]

glossary:: system {IEEE} = (1) A collection of [g:IEEE:component]s
organized to accomplish a specific function or set of
functions. [cite:ieee-std-610-12-1990] (2) Combination of interacting
elements organized to achieve one or more stated purposes. NOTE 1: A
system may be considered as a product or as the services it provides.
NOTE 2: In practice, the interpretation of its meaning is frequently
clarified by the use of an associative noun, e.g., aircraft
system. Alternatively, the word ``system'' may be substituted simply
by a context-dependent synonym, e.g., aircraft, though this may then
obscure a system principles perspective. [cite:ieee-std-12207-2008]
[cite:ieee-std-15288-2008]

glossary:: system design review {IEEE} = ([acs:IEEE:SDR]) A review
conducted to evaluate the manner in which the requirements for a
[g:IEEE:system] have been allocated to [g:IEEE:configuration item]s,
the system engineering process that produced the allocation, the
engineering planning for the next phase of the effort, manufacturing
considerations, and the planning for production engineering. See also
[g:IEEE:Critical Design Review]; [g:IEEE:Preliminary Design
Review]. [cite:ieee-std-610-12-1990]

glossary:: system development cycle {IEEE} = The period of time that
begins with the decision to develop a [g:IEEE:system] and ends when
the [g:IEEE:system] is delivered to its end user. Note: This term is
sometimes used to mean a longer period of time, either the period that
ends when the [g:IEEE:system] is no longer being enhanced, or the
entire [g:IEEE:system life cycle]. Contrast with: [g:IEEE:system life
cycle]. See also [g:IEEE:software development
cycle]. [cite:ieee-std-610-12-1990]

glossary:: system element {IEEE} = Member of a set of elements that
constitutes a [g:IEEE:system]. NOTE: A system element is a discrete
part of a [g:IEEE:system] that can be implemented to fulfill specified
requirements. A system element can be hardware, software, data,
humans, processes (e.g. processes for providing service to users),
procedures (e.g., operator instructions), facilities, materials, and
naturally occurring entities (e.g., water, organisms, minerals), or
any combination. [cite:ieee-std-12207-2008] [cite:ieee-std-15288-2008]

glossary:: system integration test {IEEE} = Same as [g:IEEE:systems
integration testing]

glossary:: system life cycle {IEEE} = The period of time that begins
when a [g:IEEE:system] is conceived and ends when the [g:IEEE:system]
is no longer available for use. See also [g:IEEE:system development
cycle]; [g:IEEE:software life cycle]. [cite:ieee-std-610-12-1990]

glossary:: system resources chart {IEEE} = See: [g:IEEE:block
diagram]. [cite:ieee-std-610-12-1990]

glossary:: system testing {IEEE} = Testing conducted on a complete,
integrated system to evaluate the system's compliance with its
specified requirements. [cite:ieee-std-829-2008]

glossary:: system-of-interest {IEEE} = [g:IEEE:system] whose
[g:IEEE:life cycle] is under consideration in the context of this
International Standard. [cite:ieee-std-15288-2008]

glossary:: systems integration testing {IEEE} = (1) Testing in which
the interaction between the implemented system and external systems is
tested.  See also [g:IEEE:unit testing], [g:IEEE:component test],
[g:IEEE:component integration test], [g:IEEE:system testing], and
[g:IEEE:operational testing], (2) Testing conducted on multiple
complete, integrated systems to evaluate their ability to communicate
successfully with each other and to meet the overall integrated
systems' specified requirements. [cite:ieee-std-829-2008]

######################################################################
# T
######################################################################

glossary:: task {IEEE} = (1) Requirement, recommendation, or
permissible action, intended to contribute to the achievement of one
or more outcomes of a process. [cite:ieee-std-12207-2008]
[cite:ieee-std-15288-2008] (2) The smallest unit of work subject to
management accountability. A task is a well-defined work assignment
for one or more project members. Related tasks are usually grouped to
form activities. [cite:ieee-std-829-2008]

glossary:: temporal cohesion {IEEE} = A type of [g:IEEE:cohesion] in
which the tasks performed by a software module are all required at a
particular phase of program execution; for example, a module
containing all of a program's initialization tasks. Contrast with:
[g:IEEE:coincidental cohesion]; [g:IEEE:communicational cohesion];
[g:IEEE:functional cohesion]; [g:IEEE:logical cohesion];
[g:IEEE:procedural cohesion]; [g:IEEE:sequential
cohesion]. [cite:ieee-std-610-12-1990]

glossary:: test {IEEE} = (1) (A) A set of one or more test cases. (B)
A set of one or more test procedures. (C) A set of one or more test
cases and procedures. (D) The activity of executing (A), (B), and/or
(C). [cite:ieee-std-829-2008]

glossary:: test approach {IEEE} = A particular method that will be
employed to pick the particular test case values.  This may vary in
specificity from very general (e.g., black box or white box) to very
specific (e.g., minimum and maximum boundary
values). [cite:ieee-std-829-2008]

glossary:: test case {IEEE} = (A) A set of test inputs, execution
conditions, and expected results developed for a particular objective,
such as to exercise a particular program path or to verify compliance
with a specific requirement. (B) Documentation specifying inputs,
predicted results, and a set of execution conditions for a test
item. [cite:ieee-std-829-2008]

glossary:: test class {IEEE} = A designated grouping of test
cases. [cite:ieee-std-829-2008]

glossary:: test coverage {IEEE} = Extent to which the test cases test
the requirements for the system or software
product. [cite:ieee-std-12207-2008]

glossary:: test design {IEEE} = Documentation specifying the details
of the test approach for a software feature or combination of software
features and identifying the associated tests (commonly including the
organization of the tests into groups). [cite:ieee-std-829-2008]

glossary:: test effort {IEEE} = The activity of performing one or more
testing tasks. [cite:ieee-std-829-2008]

glossary:: test item {IEEE} = A software or system item that is an
object of testing. [cite:ieee-std-829-2008]

glossary:: test level {IEEE} = A separate test effort that has its own
documentation and resources (e.g., component, component integration,
system, and acceptance). [cite:ieee-std-829-2008]

glossary:: test phase {IEEE} = The period of time in the
[g:IEEE:software life cycle] during which the [g:IEEE:component]s of a
[g:IEEE:software product] are evaluated and integrated, and the
software product is evaluated to determine whether or not
[g:IEEE:requirement]s have been satisfied. [cite:ieee-std-610-12-1990]

glossary:: test plan {IEEE} = (A) A document describing the scope,
approach, resources, and schedule of intended test activities. It
identifies [g:IEEE:test item]s, the [g:IEEE:feature]s to be tested,
the testing tasks, who will do each task, and any risks requiring
contingency planning. (B) A document that describes the technical and
management approach to be followed for testing a system or
component. Typical contents identify the items to be tested, tasks to
be performed, responsibilities, schedules, and required resources for
the testing activity.  The document may be a Master Test Plan or a
Level Test Plan. [cite:ieee-std-829-2008]

glossary:: test procedure {IEEE} = (A) Detailed instructions for the
setup, execution, and evaluation of results for a given test case. (B)
A document containing a set of associated instructions as in (A). (C)
Documentation that specifies a sequence of actions for the execution
of a test. [cite:ieee-std-829-2008] See also the CMMI definition of
[g:CMMI:test procedure]

glossary:: test unit {IEEE} = A set of one or more computer program
modules together with associated control data, (for example, tables),
usage procedures, and operating procedures that satisfy the following
conditions: (a) All modules are from a single computer program; (b) At
least one of the new or changed modules in the set has not completed
the unit test; (c) The set of modules together with its associated
data and procedures are the sole object of a testing
process. [cite:ieee-std-1008-1987] [cite:ieee-std-610-12-1990]

glossary:: testability {IEEE} = Extent to which an objective and
feasible test can be designed to determine whether a requirement is
met. [cite:ieee-std-12207-2008]

glossary:: testing {IEEE} = (A) An activity in which a [g:IEEE:system]
or [g:IEEE:component] is executed under specified conditions, the
results are observed or recorded, and an evaluation is made of some
aspect of the system or component. (B) To conduct an activity as in
(A). [cite:ieee-std-829-2008]

glossary:: testing task iteration {IEEE} = A task that is re-performed
during maintenance after having been originally performed during
development. [cite:ieee-std-829-2008]

glossary:: testware {IEEE} = All products produced by the testing
effort, e.g., documentation and data. [cite:ieee-std-829-2008]

glossary:: tier chart {IEEE} = See: [g:IEEE:call
graph]. [cite:ieee-std-610-12-1990]

glossary:: total correctness {IEEE} = In [g:IEEE:proof of
correctness], a designation indicating that a program's output
[g:IEEE:assertion]s follow logically from its input
[g:IEEE:assertion]s and processing steps, and that, in addition, the
program terminates under all specified input conditions. Contrast
with: [g:IEEE:partial correctness]. [cite:ieee-std-610-12-1990]

glossary:: traceability {IEEE} = (1) The degree to which a
relationship can be established between two or more products of the
development process, especially products having a
predecessor-successor or master-subordinate relationship to one
another; for example, the degree to which the requirements and design
of a given software component match. See also [g:IEEE:consistency].
(2) The degree to which each element in a software development product
establishes its reason for existing; for example, the degree to which
each element in a bubble chart references the requirement that it
satisfies. [cite:ieee-std-610-12-1990]

glossary:: traceability matrix {IEEE} = A matrix that records the
relationship between two or more products of the development process;
for example, a matrix that records the relationship between the
requirements and the design of a given software
component. [cite:ieee-std-610-12-1990]

glossary:: transaction analysis {IEEE} = A software development
technique in which the structure of a [g:IEEE:system] is derived from
analyzing the transactions that the system is required to
process. Syn: [g:IEEE:transaction-centered design]. See also
[g:IEEE:data structure-centered design];
[g:IEEE:input-process-output]; [g:IEEE:modular decomposition];
[g:IEEE:object-oriented design]; [g:IEEE:rapid prototyping];
[g:IEEE:stepwise refinement]; [g:IEEE:structured design];
[g:IEEE:transform analysis]. [cite:ieee-std-610-12-1990]

glossary:: transaction-centered design {IEEE} = See:
[g:IEEE:transaction analysis]. [cite:ieee-std-610-12-1990]

glossary:: transform analysis {IEEE} = A software development
technique in which the structure of a system is derived from analyzing
the flow of data through the system and the transformations that must
be performed on the data. Syn: [g:IEEE:transformation analysis];
[g:IEEE:transform-centered design]. See also [g:IEEE:data
structure-centered design]; [g:IEEE:input-process-output];
[g:IEEE:modular decomposition]; [g:IEEE:object-oriented design];
[g:IEEE:rapid prototyping]; [g:IEEE:stepwise refinement];
[g:IEEE:structured design]; [g:IEEE:transaction
analysis]. [cite:ieee-std-610-12-1990]

glossary:: transform-centered design {IEEE} = See: [g:IEEE:transform
analysis]. [cite:ieee-std-610-12-1990]

glossary:: transformation analysis {IEEE} = See: [g:IEEE:transform
analysis]. [cite:ieee-std-610-12-1990]

######################################################################
# U
######################################################################

glossary:: undirected graph {IEEE} = A [g:IEEE:graph] (sense 2) in
which no direction is implied in the internode connections. Contrast
with: [g:IEEE:directed graph]. [cite:ieee-std-610-12-1990]

glossary:: unit {IEEE} = (1) A separately testable element specified
in the design of a computer software component.  (2) A logically
separable part of a computer program.  (3) A software component that
is not subdivided into other components.  (4) See: [g:IEEE:test unit].
Note: The terms [g:IEEE:module], [g:IEEE:component], and [g:IEEE:unit]
are often used interchangeably or defined to be sub-elements of one
another in different ways depending upon the context. The relationship
of these terms is not yet standardized. [cite:ieee-std-610-12-1990]

glossary:: unit testing {IEEE} = A process that includes the
performance of test planning, the acquisition of a test set, and the
measurement of a test [g:IEEE:unit] against its
requirements. Measuring entails the use of sample data to exercise the
[g:IEEE:unit] and the comparison of the [g:IEEE:unit]'s actual
behavior with its required behavior as specified in the
[g:IEEE:unit]'s requirements documentation. [cite:ieee-std-1008-1987]

glossary:: upward compression {IEEE} = In software design, a form of
[g:IEEE:demodularization] in which a subordinate module is copied
in-line into the body of a superordinate module. Contrast with:
[g:IEEE:lateral compression]; [g:IEEE:downward
compression]. [cite:ieee-std-610-12-1990]

glossary:: user {IEEE} = Individual or group that benefits from a
system during its utilization. NOTE: The role of user and the role of
[g:IEEE:operator] may be vested, simultaneously or sequentially, in
the same individual or organization. [cite:ieee-std-12207-2008]
[cite:ieee-std-15288-2008]

glossary:: user documentation {IEEE} = All documentation specifically
written for users of a system, such as online help text and error
messages, compact disc or hard copy system description, technical
support manual, user manual, all system training materials, and
release notes for patches and updates. [cite:ieee-std-829-2008]

######################################################################
# V
######################################################################

glossary:: Version Description Document {IEEE} = ([acs:IEEE:VDD]) A
document that accompanies and identifies a given [g:IEEE:version] of a
[g:IEEE:system] or [g:IEEE:component].  Typical contents include an
inventory of system or component parts, identification of changes
incorporated into this [g:IEEE:version], and installation and
operating information unique to the [g:IEEE:version]
described. [cite:ieee-std-610-12-1990]

###

glossary:: validation {IEEE} = (1) The process of evaluating a
[g:IEEE:system] or [g:IEEE:component] during or at the end of the
development process to determine whether it satisfies specified
requirements. Contrast with:
[g:IEEE:verification]. [cite:ieee-std-610-12-1990], (2) Confirmation,
through the provision of objective evidence, that the requirements for
a specific intended use or application have been fulfilled. NOTE:
Validation in a life cycle context is the set of activities ensuring
and gaining confidence that a system is able to accomplish its
intended use, goals and objectives. [cite:ieee-std-12207-2008]
[cite:ieee-std-15288-2008]

glossary:: verification {IEEE} = (1) The process of evaluating a
[g:IEEE:system] or [g:IEEE:component] to determine whether the
products of a given development phase satisfy the conditions imposed
at the start of that phase. Contrast with: [g:IEEE:validation].  (2)
Formal proof of program correctness.  See: [g:IEEE:proof of
correctness]. [cite:ieee-std-610-12-1990], (3) Confirmation, through
the provision of objective evidence, that specified requirements have
been fulfilled. NOTE: Verification in a life cycle context is a set of
activities that compares a product of the life cycle against the
required characteristics for that product. This may include, but is
not limited to, specified requirements, design description and the
system itself. [cite:ieee-std-12207-2008] [cite:ieee-std-15288-2008]

glossary:: verification and validation {IEEE} = ([acs:IEEE:V&V]) The
process of determining whether the requirements for a [g:IEEE:system]
or [g:IEEE:component] are complete and correct, the products of each
development phase fulfill the requirements or conditions imposed by
the previous phase, and the final [g:IEEE:system] or
[g:IEEE:component] complies with specified [g:IEEE:requirement]s. See
also [g:IEEE:Independent Verification and
Validation]. [cite:ieee-std-610-12-1990]

glossary:: version {IEEE} = (1) An initial release or re-release of a
computer software Configuration item, associated with a complete
compilation or recompilation of the computer software configuration
item.  (2) An initial release or complete re-release of a document, as
opposed to a revision resulting from issuing change pages to a
previous release.  See also [g:IEEE:configuration control];
[g:IEEE:Version Description Document]. [cite:ieee-std-610-12-1990],
(3) Identified instance of an [g:IEEE:item]. NOTE: Modification to a
version of a software product, resulting in a new version, requires
[g:IEEE:configuration management] action. [cite:ieee-std-12207-2008]

######################################################################
# W
######################################################################

glossary:: waiver {IEEE} = A written authorization to accept a
[g:IEEE:configuration item] or other designated item which, during
production or after having been submitted for inspection, is found to
depart from specified requirements, but is nevertheless considered
suitable for use as is or after rework by an approved method.  See
also: [g:IEEE:configuration control]. Contrast with:
[g:IEEE:deviation]; [g:IEEE:engineering
change]. [cite:ieee-std-610-12-1990]

glossary:: waterfall model {IEEE} = A model of the [g:IEEE:software
development process] in which the constituent activities, typically a
[g:IEEE:concept phase], [g:IEEE:requirements phase], [g:IEEE:design
phase], [g:IEEE:implementation phase], [g:IEEE:test phase], and
[g:IEEE:installation and checkout phase], are performed in that order,
possibly with overlap but with little or no iteration. Contrast with:
[g:IEEE:incremental development]; [g:IEEE:rapid prototyping];
[g:IEEE:spiral model]. [cite:ieee-std-610-12-1990]

<<<RAW
