>>>requirement.rq-000095

title:: Represent a Formal Outcome

revision:: $Revision: 10973 $

date:: $Date: 2012-10-27 14:46:35 -0600 (Sat, 27 Oct 2012) $

author:: $Author: don.johnson $

priority:: routine

is_part_of:: rq-000035

type:: data format

description:: The data format shall have the capability to represent a
formal outcome of a test or audit.  An outcome is a ~~formal~~
evaluation of an item's status.  Any item with a status attribute may
be the subject of an outcome (problem, solution, test, task, exercise,
demonstration, etc.).  The data format must have the capability to
represent the date of review, label of item tested/audited, item
status determined by the test/audit, and a one-paragraph explanation
of how the status was determined.

index:: [id:rq-000094]

Outcomes may have the following meta data elements:

:: element

:: description

:: type

:: required?

:: cardinality

---

:yellow: ~~date~~

:yellow: Date of the review

:yellow: date

:yellow: required

:yellow: single

---

:yellow: ~~item~~

:yellow: Label of item reviewed

:yellow: ID

:yellow: required

:yellow: single

---

:yellow: ~~status~~

:yellow: Status of item determined by review

:yellow: status

:yellow: required

:yellow: single

---

: ~~explanation~~

: One paragraph explanation of reasoning for assigning the status
determined by the review

: block

: optional

: single

---

Note that ~~outcomes~~ are for documenting the ~~formally~~ determined
status of an item.  ~~Reviews~~, on the other hand, are for
documenting the ~~informally~~ determined status of an item (See
[id:rq-000094]).

~~Outcomes~~ and ~~reviews~~ should have a similar data format to make
it easy to promote a review to an outcome.

<<<requirement
